{
  "hash": "0e3420c6a25ae5ca67d7f4a0a6058dd7",
  "result": {
    "markdown": "---\ntitle: \"R Overview\"\n---\n\n\nThis course will primarily use R for analysis, though we will briefly discuss a few areas where Stata may be more efficient.\n\nLearning to program in R is not a primary goal of this course, but in proceeding through the course, you will gain and/or get practice with a lot of R skills.\n\nFor those brand new to R, I strongly recommend you complete the following tutorials prior to or at the beginning of the course.\n\n**Goal**\n\nBy the end of the first week of the course, you will want to have R and RStudio installed on your computer (both free) and feel comfortable using R as a calculator and loading datasets into R.\n\n**R and RStudio Installation**\n\n-   This [video](http://www.youtube.com/embed/ulIv0NiVTs4?rel=0) from Christopher Bail explains the R and RStudio installation process. This involves\n    1.  Going to [cran](https://cran.r-project.org/), select the link that matches your operating system, and then follow the installation instructions, and\n    2.  Visiting [RStudio](http://www.rstudio.com/) and follow the download and installation instructions. R is the statistical software and programming language used for analysis. RStudio provides a convenient user interface for running R code. You do not need RStudio to use R, but it is free and can make your life easier!\n\n\n\n{{< video src=\"https://www.youtube.com/watch?v=ulIv0NiVTs4\" >}}\n\n\n\n\n-   After installing R and RStudio, you can also follow along with Christopher Bail's [R Basics](https://www.youtube.com/watch?v=vVcH_OvrLEM) and [Data Wrangling](https://www.youtube.com/watch?v=sXVP9256JSQ) videos to learn the basic functionality of R.\n\n**Supplemental Resources**\n\nTo supplement the above resources, I would recommend playing around with one of the following:\n\n-   An additional great resource is Kosuke Imai's book *Quantitative Social Science.* The [first chapter](https://assets.press.princeton.edu/chapters/s11025.pdf) provides a written overview of installing R and the basic functions of R and R Studio, including loading data and packages into R. Data for the book is available at the bottom of this [page](https://qss.princeton.press/student-resources-for-quantitative-social-science/). Alternate coding in tidyverse for the book is available [here](https://jrnold.github.io/qss-tidy/).\n-   If you were having difficulties following Chris Bail or Kosuke Imai's instructions for installation, you can try following the first couple of Rutgers Data Librarian Ryan Womack's videos, which similarly start from the point of installation. They are [here](https://www.youtube.com/watch?v=5rOR31bmoL8&list=PLCj1LhGni3hNxsLsVNHX6V1LICyklHl2a&ab_channel=librarianwomack). He goes at a slow pace and codes along in the videos. He also has a number of videos on more advanced data analysis topics.\n-   [R for Data Science](https://r4ds.had.co.nz/) is another great resource and focuses on \"tidyverse\" code in R, which can be particularly helpful in data wrangling and visualization.\n\nNote: Much of the code used in the course will rely on \"base R\" functions (functions that already exist in R). People have also developed [tidyverse](https://www.tidyverse.org/) packages that can be easily installed in R, which supplements base R tools with alternative functions and a syntax based on a particular design philosophy, grammar, and data structure that they find preferable to base R. Using base R vs. tidyverse is often just a matter of personal taste. Either is fine to use in this course, and you will get exposure to code that relies on both.\n\nThis is a lot of information to digest all at once. Don't worry. No one remembers everything. Plan on going back to these resources often throughout the course and beyond. We will have office hours the first week of the course to help troubleshoot issues.\n\n## First Time with R and RStudio\n\nThis next section provides a few notes on using R and RStudio now that you have installed it. This is mostly repetitive of the other resources. This includes only the bare essential information for opening an R script and digging into using R as a calculator. In this section, we cover the following materials:\n\n-   Using R as a calculator and assigning objects using `<-`\n-   Setting your working directory and the `setwd()` function.\n-   Creating and saving an R script\n\n### **Open RStudio**\n\n![](images/rconsole1.png)\n\n**Note:** The first time you open RStudio, you likely only have the three windows above. We will want to create a fourth window by **opening an R script** to create the fourth window.\n\n-   To do this, in RStudio, click on File -\\> New -\\> R script in your computer's toolbar. This will open a blank document for text editing in the upper left of the RStudio window. We will return to this window in a moment.\n    -   You can alternatively click on the green + sign indicator in the top-left corner of the RStudio window, which should give you the option to create a new R script document.\n\nNow you should have something that looks like this, similar to Figure 1.1. in QSS:\n\n![](images/rconsole2.png)\n\n-   The upper-left window has our .R script document that will contain code.\n-   The lower-left window is the console. This will show the output of the code we run. We will also be able to type directly in the console.\n-   The upper-right window shows the environment (and other tabs, such as the history of commands). When we load and store data in RStudio, we will see a summary of that in the environment.\n-   The lower-right window will enable us to view plots and search help files, among other things.\n\n### **Using R as a Calculator**\n\nThe *bottom left* window in your RStudio is the Console. You can type in this window to use R as a calculator or to try out commands. It will show the raw output of any commands you type. For example, we can try to use R as a calculator. Type the following in the Console (the bottom left window) and hit \"enter\" or \"return\" on your keyboard:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n5 - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n5^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n\n```{.r .cell-code}\n5 * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n5/3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.666667\n```\n:::\n\n```{.r .cell-code}\n(5 + 3) * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n:::\n\n\nIn the other RStudio windows, the upper right will show a history of commands that you have sent from the text editor to the R console, along with other items. The lower right will show graphs, help documents and other features. These will be useful later in the course.\n\n### **Working in an R Script**\n\nEarlier, I asked you to open an R script in the upper left window by doing File, then New File, then R Script. Let's go back to working in that window.\n\n**Set your working directory `setwd()`**\n\n(Almost) every time you work in RStudio, the first thing you will do is set your working directory. This is a designated folder in your computer where you will save your R scripts and datasets.\n\nThere are many ways to do this.\n\n-   An easy way is to go to Session $\\rightarrow$ Set Working Directory $\\rightarrow$ Choose Directory. I suggest choosing a folder in your computer that you can easily find and that you will routinely use for this class. Go ahead and create/select it.\n-   Note: when you selected your directory, code came out in the bottom left Console window. This is the `setwd()` command which can also be used directly to set your working directory in the future.\n-   If you aren't sure where your directory has been set, you can also type `getwd()` in your Console. Try it now\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Example of where my directory was\ngetwd()\n```\n:::\n\n\nIf I want to change the working directory, I can go to the top toolbar of my computer and use Session $\\rightarrow$ Set Working Directory $\\rightarrow$ Choose Directory or just type my file pathway using the `setwd()` below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Example of setting the working directory using setwd().\n## Your computer will have your own file path.\nsetwd(\"/Users/ktmccabe/Dropbox/Rutgers Teaching/\")\n```\n:::\n\n\n**Saving the R Script**\n\nLet's now save our R script to our working directory and give it an informative name. To do so, go to File, then Save As, make sure you are in the same folder on your computer as the folder you chose for your working directory.\n\nGive the file an informative name, such as: \"McCabeWeek1.R\". Note: all of your R scripts will have the .R extension.\n\n### **Preparing your R script**\n\nNow that we have saved our R script, let's work inside of it. Remember, we are in the top-left RStudio window now.\n\n-   Just like the beginning of a paper, you will want to title your R script. In R, any line that you start with a \\# will not be treated as a programming command. You can use this to your advantage to write titles/comments. Below is a screenshot example of a template R script.\n-   You can specify your working directory at the top, too. Add your own filepath inside `setwd()`\n\n![](images/templateR.png)\n\n-   Then you can start answering problems in the rest of the script.\n-   Think of the R script as where you write the final draft of your paper. In the Console (the bottom-left window), you can mess around and try different things, like you might when you are taking notes or outlining an essay. Then, write the final programming steps that lead you to your answer in the R script. For example, if I wanted to add 5 + 3, I might try different ways of typing it in the Console, and then when I found out `5 + 3` is the right approach, I would type that into my script.\n\n### **Running Commands in your R script**\n\nThe last thing we will note in this initial handout is how to execute commands in your R script.\n\nTo run / execute a command in your R script (the upper left window), you can\n\n1.  Highlight the code you want to run, and then hold down \"command + return\" on a Mac or \"control + enter\" on Windows\n2.  Place your cursor at the end of the line of code (far right), and hit \"command + return\" on a Mac or \"control + return\" on Windows, or\n3.  Do 1 or 2, but instead of using the keyboard to execute the commands, click \"Run\" in the top right corner of the upper-left window.\n\nTry it: Type `5 + 3` in the R script. Then, try to execute `5 + 3`. It should look something like this:\n\n![](images/rtemplate2.png)\n\nAfter you executed the code, you should see it pop out in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n![](images/runningcode.png){width=\"90%\"}\n\nNote: The symbol \\# also allows for annotation behind commands or on a separate line. Everything that follows \\# will be ignored by R. You can annotate your own code so that you and others can understand what each part of the code is designed to do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Example\nsum53 <- 5 + 3 # example of assigning an addition calculation\n```\n:::\n\n\n### **Objects**\n\nSometimes we will want to store our calculations as \"objects\" in R. We use `<-` to assign objects by placing it [to the left](https://www.youtube.com/watch?v=vLZA67L7gIo&ab_channel=BeyonceSasha1) of what we want to store. For example, let's store the calculation `5 + 3` as an object named `sum53`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum53 <- 5 + 3\n```\n:::\n\n\nAfter we execute this code, `sum53 now stores the calculation. This means, that if we execute a line of code that just has`sum53\\`, it will output 8. Try it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum53\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nNow we no longer have to type `5 + 3`, we can just type `sum53`. For example, let's say we wanted to subtract 2 from this calculation. We could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum53 - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nLet's say we wanted to divide two stored calculations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nten <- 5 + 5\ntwo <- 1 + 1\nten / two\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nThe information stored does not have to be numeric. For example, it can be a word, or what we would call a character string, in which case you need to use quotation marks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmccabe <- \"professor for this course\"\nmccabe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"professor for this course\"\n```\n:::\n:::\n\n\n*Note:* Object names cannot begin with numbers and no spacing is allowed. Avoid using special characters such as % and \\$, which have specific meanings in R. Finally, use concise and intuitive object names.}\n\n-   GOOD CODE: `practice.calc <- 5 + 3`\n-   BAD CODE: `meaningless.and.unnecessarily.long.name <- 5 + 3`\n\nWhile these are simple examples, we will use objects all the time for more complicated things to store (e.g., like full datasets!) throughout the course.\n\nWe can also store an array or \"vector\" of information using `c()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsomenumbers <- c(3, 6, 8, 9)\nsomenumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 6 8 9\n```\n:::\n:::\n\n\n**Importance of Clean Code**\n\nIdeally, when you are done with your R script, you should be able to highlight the entire script and execute it without generating any error messages. This means your code is clean. Code with typos in it may generate a red error message in the Console upon execution. This can happen when there are typos or commands are misused.\n\nFor example, R is case sensitive. Let's say we assigned our object like before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum53 <- 5 + 3\n```\n:::\n\n\nHowever, when we went to execute `sum53`, we accidentally typed `Sum53`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSum53\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'Sum53' not found\n```\n:::\n:::\n\n\nOnly certain types of objects can be used in mathematical calculations. Let's say we tried to divide `mccabe` by 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmccabe / 2\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mccabe/2: non-numeric argument to binary operator\n```\n:::\n:::\n\n\nA big part of learning to use R will be learning how to troubleshoot and detect typos in your code that generate error messages.\n\n![](images/punctuation.png){width=\"80%\"}\n\n### **Practice**\n\nBelow is an exercise that will demonstrate you are able to use R as a calculator and create R scripts.\n\n1.  Create an R script saved as \\`\\`LastnameSetup1.R\" (use your last name). Within the R script, follow the example from this handout and title the script.\n2.  Set your working directory, and include the file pathway (within `setwd()`) at the top of your .R script.\n3.  Do the calculation 4 + 3 - 2 in R. Store it as an object with an informative name.\n4.  Do the calculation 5 $\\times$ 4 in R. Store it as an object with an informative name.\n5.  Add these two calculations together. In R, try to do this by adding together the objects you created, not the underlying raw calculations.\n\n\n## Data Wrangling\n\nSo you have some data.... AND it's a mess!!!\n\nA lot of the data we may encounter in courses has been simplified to allow students to focus on other concepts. We may have data that look like the following:\n\n\n\n```{.r .cell-code}\nnicedata <- data.frame(gender = c(\"Male\", \"Female\", \"Female\", \"Male\"),\n           age = c(16, 20, 66, 44),\n           voterturnout = c(1, 0, 1, 0))\n```\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  gender age voterturnout\n1   Male  16            1\n2 Female  20            0\n3 Female  66            1\n4   Male  44            0\n```\n:::\n:::\n\n\nIn the real world, our data may hit us like a ton of bricks, like the below:\n\n\n\n```{.r .cell-code}\nuglydata <- data.frame(VV160002 = c(2, NA, 1, 2),\n           VV1400068 = c(16, 20, 66, 44),\n           VV20000 = c(1, NA, 1, NA))\n```\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  VV160002 VV1400068 VV20000\n1        2        16       1\n2       NA        20      NA\n3        1        66       1\n4        2        44      NA\n```\n:::\n:::\n\n\nA lot of common datasets we use in the social sciences are messy, uninformative, sprawling, misshaped, and/or incomplete. What do I mean by this?\n\n-   The data might have a lot of missing values. For example, we may have `NA` values in R, or perhaps a research firm has used some other notation for missing data, such as a `99`.\n-   The variable names may be uninformative.\n    -   For example, there may be no way to know by looking at the data, which variable represents gender. We have to look at a codebook.\n-   Even if we can tell what a variable is, its categories may not be coded in a way that aligns with how we want to use the data for our research question.\n    -   For example, perhaps you are interested in the effect of a policy on people below vs. 65 and over in age. Well, your age variables might just be a numeric variable. You will have to create a new variable that aligns with your theoretical interest.\n-   Datasets are often sprawling. Some datasets may have more than 1000 variables. It is hard to sort through all of them. Likewise, datasets may have millions of observations. We cannot practically look through all the values of a column to know what is there.\n-   Sometimes we have data shaped into separate columns when we'd rather it be reshaped into different rows.\n-   Maybe you have encountered a beautiful dataset that provides many measures of your independent variables of interest, but there's one catch-- it has no variable related to your outcome! You have to merge data from multiple sources to answer your research question.\n\nBelow are a few tips and resources. Ultimately, research is a constant debugging process. Loving R means seeing [red](https://www.youtube.com/watch?v=G8HnhY_znos) error messages. The nice thing about R is that a lot of researchers constantly post coding tips and questions online. Google ends up being your friend, but it's entirely normal to have to devote several hours (days?) to cleaning data.\n\n![](images/rgoogle.png){width=\"75%\"}\n\n### Dealing with Uninformative Variable Names\n\nHopefully, there is an easy fix for dealing with uninformative variable names. I say \"hopefully\" because hopefully when you encounter a dataset with uninformative variable names, the place where you downloaded the data will also include a codebook telling you what each variable name means, and how the corresponding values are coded.\n\nUnfortunately, this may not always be the case. One thing you can do as a researcher is when you create a dataset for your own work, keep a record (in written form, on a word document or in a pdf or code file) of what each variable means (e.g., the survey question it corresponds to or the exact economic measure), as well as how the values of the variables are coded. This good practice will help you in the short-term, as you pause and come back to working on a project over the course of a year, as well as benefit other researchers in the long run after you publish your research.\n\nFor examples of large codebooks, you can view the [2016 American National Election Study Survey](https://electionstudies.org/data-center/2016-time-series-study/) and click on a codebook.\n\nI recommend that once you locate the definition of a variable of interest, rename the variable in your dataset to be informative. You can do this by creating a new variable or overwriting the name of the existing variable. You might also comment a note for yourself of what the values mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Option 1: create new variable\n## gender 2=Male, 1=Female\nuglydata$gender <- uglydata$VV160002\n\n## Option 2: Overwrite\nnames(uglydata)[1] <- \"gender2\"\n```\n:::\n\n\n### Dealing with Missing Data\n\nWhen we have a column with missing data, it is best to do a few things:\n\n-   Try to quantify how much missing data there is and poke at the reason why data are missing.\n    -   Is it minor non-response data?\n    -   Or is it indicative of a more systematic issue? For example, maybe data from a whole group of people or countries is missing for certain variables.\n-   If the data are missing at a very minor rate and/or there is a logical explanation for the missing data that should not affect your research question, you may choose to \"ignore\" the missing data when performing common analyses, such as taking the mean or running a regression.\n    -   If missing data are a bigger problem, you may consider alternative solutions, such as \"imputing\" missing data or similarly using some type of auxilliary information to help fill in the missing values.\n\nIf we want to figure out how much missing data we have in a variable, we have a couple of approaches:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Summarize this variable\nsummary(uglydata$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  1.000   1.500   2.000   1.667   2.000   2.000       1 \n```\n:::\n\n```{.r .cell-code}\n## What is the length of the subset of the variable where the data are missing\nlength(uglydata$gender[is.na(uglydata$gender) == T])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nIf we choose to ignore missing data, this can often be easily accomplished in common operations. For example, when taking the `mean` we just add an argument `na.rm = T`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(uglydata$VV1400068, na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36.5\n```\n:::\n:::\n\n\nIf we do a regression using `lm` or `glm`, R will automatically \"listwise\" delete any observation that has missing data (`NA`) on any of the variables in our regression model.\n\nWe should always be careful with missing data to understand how R is treating it in a particular scenario.\n\nFor example if we were to run `table(uglydata$gender)`, we would have no idea there were missing data unless we knew that the total number of observations `nrow(uglydata)` was greater than 3. The `table()` command is omitting the missing values by default.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(gender= uglydata$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngender\n1 2 \n1 2 \n```\n:::\n:::\n\n\n### Dealing with Variable Codings that Aren't Quite Right\n\nOften times the ways that variables are coded in datasets we get off-the-shelf are not coded exactly as how we were dreaming up operationalizing our concepts. Instead, we are going to have to wrangle the data to get them into shape.\n\nThis may involve creating new variables that recode certain values, creating new variables that collapse some values into a smaller number of categories, combining multiple variables into a single variable (e.g., representing the average), or setting some of the variable values to be missing (`NA`). All of these scenarios may come up when you are dealing with real data.\n\n[Chapter 2](http://assets.press.princeton.edu/chapters/s2-11025.pdf) of Kosuke Imai's book *Quantitative Social Science* walks through some examples of how to summarize your data, subset the data (2.2.3), create new variables using conditional statements (Section 2.2.4, e.g., \"If age is below 65, assign the new variable a value of\"0\", otherwise, assign it a value of \"1\"), and creating new factor variables (2.2.5, e.g., coding anyone who is Protestant, Catholic, or Lutheran in the data as \"Christian\").\n\nHere is a short video working through the example from 2.2.4 using conditional statements to construct new variables. It uses the `resume` dataframe, which can be loaded below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresume <- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/resume.csv\")\n```\n:::\n\n{{< video src=\"https://www.youtube.com/watch?v=lMY2t4SQ0Pg\" >}}\n\n\n\nR Studio has its own set of primers on various topics, including summarizing and working with data. See the [Work with Data](https://rstudio.cloud/learn/primers/2) primer, as well as the full list of other [topics](https://rstudio.cloud/learn/primers). These will often rely on tidyverse coding.\n\n### Dealing with Incomplete Data (Merging!)\n\nSometimes in order to answer our research questions, we need to combine data from multiple sources. If we have a large amount of data, this may be quite daunting. Fortunately, R has several commands that allow us to merge or append datasets.\n\nHere is a video working through examples of merging and appending data based on the tutorial below.\n\n\n\n{{< video src=\"https://www.youtube.com/watch?v=NwwlB6Lp1TY\" >}}\n\n\n\n\nHere are a few resources on merging and appending data:\n\n-   Using the `merge` command in R. [See Explanation.](https://sejdemyr.github.io/r-tutorials/statistics/tutorial5.html)\n    -   It will look for variable(s) held in common between datasets and join the datasets by the matching values on these variables.\n-   Appending data in R (e.g., Maybe you have one dataset from 2010 and another from 2012, and you want to stack them on top of each other). [See Explanation.](https://www.princeton.edu/~otorres/Merge101R.pdf)\n\nSome merging problems are extremely difficult. For example, some researchers need to merge large datasets--like the voter file-- with other administrative records. However, how someone's name is displayed in one dataset might not match at all with the other dataset. For these complex problems, we might need \"fuzzy matching.\" Here is an R package that helps with this more complex [case](https://github.com/kosukeimai/fastLink) and related [paper](https://imai.fas.harvard.edu/research/files/linkage.pdf).\n\n### Dealing with Poorly Shaped Data\n\nData can come in a variety of shapes and sizes. It's a [beautiful disaster](https://www.youtube.com/watch?v=g4vQeHP_nxg).\n\nSometimes it's particularly useful to have data in wide formats, where every row relates to a particular unit of data-- such as a country or a survey respondent. And perhaps each column represents information about that unit at a particular point in time. For example, perhaps you have a column with information on that subject for the past five years.\n\n\n\n```{.r .cell-code}\ncountrywide <- data.frame(country = c(\"Canada\", \"USA\"),\n                          economy2016 = c(10, 12),\n                          economy2017 = c(11, 11),\n                          economy2018 = c(9, 5),\n                          economy2019 = c(13, 8),\n                          economy2020 = c(12, 6))\n```\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  country economy2016 economy2017 economy2018 economy2019 economy2020\n1  Canada          10          11           9          13          12\n2     USA          12          11           5           8           6\n```\n:::\n:::\n\n\nHowever, other times, it would be more useful to you, as you dig into your data analysis, to have this information arranged in \"long\" format, such that every row is now a unit-year combination. You have a row for Canada in 2020, a row for Canada in 2019, and so on. Countries are now represented in multiple rows of your data.\n\n\n\n```{.r .cell-code}\ncountrylong <- data.frame(country = rep(c(\"Canada\", \"USA\"),5),\n                          year = 2016:2020,\n                          economy= c(10, 12,11, 11,9, 5,13, 8,12, 6))\n```\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   country year economy\n1   Canada 2016      10\n2      USA 2017      12\n3   Canada 2018      11\n4      USA 2019      11\n5   Canada 2020       9\n6      USA 2016       5\n7   Canada 2017      13\n8      USA 2018       8\n9   Canada 2019      12\n10     USA 2020       6\n```\n:::\n:::\n\n\nUltimately, different shapes of data are advantageous for different research questions. This means it is best if we have a way to (at least somewhat) easily shift between the two formats.\n\nHere is a resource on how to \"reshape\" your data between wide and long from [UCLA](https://stats.idre.ucla.edu/r/faq/how-can-i-reshape-my-data-in-r/).\n\nHere are a few additional resources:\n\n-   More on [reshape](https://www.r-bloggers.com/converting-a-dataset-from-wide-to-long) -- For the tidyverse fans. Using `gather()` and `spread()` in tidyverse from [R for Data Science](https://r4ds.had.co.nz/) and explained by Chris Bail [here](https://www.youtube.com/watch?v=sXVP9256JSQ).\n\n### Subsetting data by rows and columns\n\nSometimes we do not want to deal with our entire dataset for an analysis. Instead, we might want to only analyze certain rows (e.g., maybe if we are just studying Democrats, for example). Similarly, we might have a dataframe with 1000 columns, from which we are only using about 20. We might want to remove those extra columns to make it easier to work with our dataframes.\n\nBelow are a few examples of subsetting data and selecting columns. We will use the `resume` dataset from the Kosuke Imai QSS book for demonstration. This is a dataset from an experiment describing whether certain applicants, who varied in the gender (`sex`) and race (`race`) signaled by their name (`firstname`), received callbacks (`call`) for their employment applications.\n\nHere is a short video working through these examples.\n\n\n\n{{< video src=\"https://www.youtube.com/watch?v=6EdllKtaDHE\" >}}\n\n\n\n\nLet's load the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresume <- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/resume.csv\")\n```\n:::\n\n\n***Subset particular rows***\n\nTo do this, put the row numbers you want to keep on the left side of the comma. Putting nothing on the right side means you want to keep all columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## numerically\nresume[1,] # first row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  firstname    sex  race call\n1   Allison female white    0\n```\n:::\n\n```{.r .cell-code}\nresume[1:4,] # first through 4th rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  firstname    sex  race call\n1   Allison female white    0\n2   Kristen female white    0\n3   Lakisha female black    0\n4   Latonya female black    0\n```\n:::\n\n```{.r .cell-code}\nresume[c(1, 3, 4),] # 1, 3, 4 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  firstname    sex  race call\n1   Allison female white    0\n3   Lakisha female black    0\n4   Latonya female black    0\n```\n:::\n:::\n\n\nUsing the `subset` command with logical expressions `>` `>=` `==` `<` `<=` `!=`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## by logical expressions\nwomen <- subset(resume, sex == \"female\")\nwomen <- resume[resume$sex == \"female\", ] ## alternative\n\ncalledback <- subset(resume, call == 1)\ncalledback <- subset(resume, call > 0)\n```\n:::\n\n\nAnd or Or statements `&` or `|`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblackwomen <- subset(resume, sex == \"female\" & race == \"black\")\nbradbrendan <- subset(resume, firstname == \"Brad\" | \n                        firstname == \"Brendan\")\n```\n:::\n\n\nThe tidyverse also has commands for subsetting. Here is an example using `filter`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nblackwomen <- resume %>%\n  filter(sex == \"female\" & race == \"black\")\n```\n:::\n\n\n***Selecting particular columns***\n\nNote, now we are working on the right side of the comma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## numerically\nfirst <- resume[, 1] # first column\nfirstsecond <- resume[, 1:2] # first and second column\nnotfourth <- resume[, -4] # all but the fourth column\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## by labels\njustthese <- resume[, c(\"firstname\", \"sex\")]\n```\n:::\n\n\nUsing the `select` command\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## install.packages(\"dplyr\")\nlibrary(dplyr)\nsubdata <- resume %>% dplyr::select(firstname, sex) ## just these\nsubdata2 <- resume %>% dplyr::select(-firstname, -sex) ## all but these two\n```\n:::\n\n\n### Visualizing Data\n\nThere are many commands for plotting your data in R. The most common functions in base R are `plot()`, `barplot()` and `hist()`. You will see many examples throughout the notes with each of these functions.\n\nTo get you started, the most simple thing to note about the `plot()` command is that it is based on a coordinate system. You specify the `x` and `y` coordinates for which you want to plot a series of points.\n\nFor example, here is a plot at points 1,40; 3,50; and 4,60.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x = c(1,3,4), y=c(40, 50, 60))\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nInstead of putting raw numbers as the coordinates, you can provide object names. E.g.,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxcoord <- c(1,3,4)\nycoord <- c(40, 50, 60)\nplot(x = xcoord, y=ycoord)\n```\n:::\n\n\nBeyond that, you can play around with many aesthetics in R, such as the `type`, `pch`, `lty`, as well as labels `main`, `ylab`, `xlab`, font sizes `cex.main`, `cex.axis`, `cex.lab`, and axis limits `ylim`, `xlim`. Below is an example. Play around with changing some of the specifications, and see how the plot changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxcoord <- c(1,3,4)\nycoord <- c(40, 50, 60)\nplot(x = xcoord, y=ycoord,\n     main = \"Example plot\",\n     ylab= \"Example y axis\",\n     xlab = \"Example x axis\",\n     cex.main = .8,\n     ylim = c(0, 80),\n     xlim = c(1,4),\n     pch = 15,\n     col=\"red\",\n     type = \"b\",\n     lty=2)\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nThe function `barplot` takes a single vector of values. This can be a raw vector you have created or a `table` object or `tapply` object, for example, displaying the counts of different observations or means.\n\nYou can add a `names.arg` argument to specify particular names for each bar. Many of the other aesthetics are the same as `plot`. You can play around with adding aesthetics.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(ycoord,\n        names.arg = c(\"First\", \"Second\", \"Third\"),\n        col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nFor more on visualizing data, you can see the RStudio [primers](https://rstudio.cloud/learn/primers/3).\n\nR also has a package called `ggplot2` which includes the function `ggplot` and many elaborate ways to plot your data. The `gg` stands for the grammar of graphics. For a video introduction to `ggplot` I recommend watching Ryan Womack's video from 27:30 on. It uses the data `diamonds` which can be loaded in R through the following command. See approximately minute 35 for an example with a bar plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata(diamonds)\n```\n:::\n\n{{< video src=\"https://www.youtube.com/watch?v=c9DZ8lBwxZs\" >}}\n\n\n\n\n### Reproducing your steps\n\nIt is really important to keep a record of all of the changes you have made to the original data. An R script or R markdown file is a useful way to do this, so long as you add comments that explain what you are doing.\n\nYou want to get your code to a place when a stranger can open your R file, load your data, and reproduce each step you took to get to the final results--- all while never even needing to contact you with questions. That can be difficult, but it's good to aim for that high bar, even if sometimes, we fall short in how we are documenting each step.\n\nThis website provides a nice introduction to R Markdown, one tool for embedding R code inside textual documents. See [here](https://rpubs.com/brandonkopp/RMarkdown).\n\nIf you want to get advanced with reproducibility, you can watch Chris Bail's on the [subject](https://www.youtube.com/watch?v=98IcckSOfnw) describing the uses of R Markdown and GitHub among other tools for communicating and collaboration. He also links to other resources.\n\n## Tools for writing up results\n\n### R Markdown\n\nR Markdown is a free tool within RStudio that allows you to weave together text and code (along with images and tables) into the same document. It can compile these documents (written inside R Studio) into html, pdf, or Word doc output files. R Markdown can be incredibly helpful for doing things like generating replication files, writing up problem sets, or even writing papers.\n\nThis [site](https://rpubs.com/brandonkopp/RMarkdown) includes an introduction to R Markdown.\n\n-   See also [here](https://rmarkdown.rstudio.com/articles_intro.html) and [here](https://monashbioinformaticsplatform.github.io/2017-11-16-open-science-training/topics/rmarkdown.html)\n\nR Markdown has its own syntax, which includes functionality for writing mathematical equations. The pdf output option in R Markdown requires LaTex, described in the next section. Below we work with just the html output.\n\nR Markdown documents can be \"compiled\" into html, pdf, or docx documents by clicking the `Knit` button on top of the upper-left window. Below is an example of what a compiled html file looks like.\n\n-   Note that the image has both written text and a gray chunk, within which there is some R code, as well as the output of the R code (e.g., the number 8 and the image of the histogram plot. ![](images/rmarkdownscreenshot.png){width=\"60%\"}\n\nWe say this is a \"compiled\" RMarkdown document because it differs from the raw version of the file, which is a .Rmd file format. Below is an example of what the raw .Rmd version looks like, compared to the compiled html version.\n\n![](images/rmarkdownraw.png){width=\"45%\"} ![](images/rmarkdownscreenshot.png){width=\"40%\"}\n\n***Getting started with RMarkdown***\n\nJust like with a regular R script, to work in R Markdown, you will open up RStudio.\n\n-   For additional support beyond the notes below, you can also follow the materials provided by RStudio for getting started with R Markdown https://rmarkdown.rstudio.com/lesson-1.html.\n\nThe **first time** you will be working in R Markdown, you will want to install two packages: `rmarkdown` and `knitr`. You can do this in the Console window in RStudio (remember the lower-left window!).\n\nType the following into the Console window and hit enter/return.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\n```\n:::\n\n\nOnce you have those installed, now, each time you want to create an R Markdown document, you will open up a .Rmd R Markdown file and get to work.\n\n1.  Go to File -\\> New File -\\> R Markdown in RStudio\n    -   Alternatively, you can click the green + symbol at the top left of your RStudio window\n2.  This should open up a window with several options, similar to the image below\n    -   Create an informative title and change the author name to match your own\n    -   For now, we will keep the file type as html. In the future, you can create pdf or .doc documents. However, these require additional programs installed on your computer, which we will not cover in the course.\n\n![](images/rmarkdownnewfile.png)\n\n3.  After you hit \"OK\" a new .Rmd script file will open in your top-left window with some template language and code chunks, similar to the image below. Alternatively, you can start from scratch by clicking \"Create Empty Document\" or open a template .Rmd file of your own saved on your computer.\n\n![](images/rmarkdowntemplate.png)\n\n4.  ***Save as .Rmd file.*** Save the file by going to \"File -\\> Save as\" in RStudio\n\n-   Give the file an informative name like your LastnamePractice1.Rmd\n\n5.  ***Key Components.*** Now you are ready to work within the Rmd script file. We will point to four basic components of this file, and you can build your knowledge of RMarkdown from there.\n\n    1.  The top part bracketed by `---` on top and bottom is the YAML component. This tells RStudio the pertinent information about how to \"compile\" the Rmd file.\n        -   Most of the time you can leave this alone, but you can always edit the title, author, or date as you wish.\n    2.  The next component are the global options for the document. It is conveniently labeled \"setup.\" By default what this is saying is that the compiled version will \"echo\" (i.e., display all code chunks and output) unless you specifically specify otherwise. For example, note that it says `include = FALSE` for the setup chunk. That setting means that this code chunk will \"run\" but it will not appear in the nicely compiled .html file.\n        -   Most of the time you will not need to edit those settings.\n    3.  The third component I want to bring attention to is the body text. The \\# symbol in RMarkdown is used to indicate that you have a new section of the document. For example, in the compiled images at the beginning, this resulted in the text being larger and bolded when it said \"Problem 2.\" In addition to just using a single #, using \\## or \\### can indicate subsections or subsubsections. Other than that symbol, you can generally write text just as you would in any word processing program, with some exceptions, such as how to make text bold or italicized.\n    4.  The final component I want to call attention to are the other main body code chunks. These are specific parts of the document where you want to create a mini R script. To create these, you can simply click the + C symbol toward the top of the top left window of RStudio and indicate you want an R chunk.\n\n    <center>![](images/rmarkdownnewchunk.png){width=\"20%\"}</center>\n\n6.  ***Writing R Code.*** Within a code chunk, you can type R code just like you would in any R script, as explained in the previous section. However, in RMarkdown, you also have the option of running an entire code chunk at once by hitting the green triangle at the top-right of a given code chunk.\n\n![](images/codechunkexample.png){width=\"70%\"}\n\n7.  ***Knitting the document.*** Once you have added a code chunk and/or some text, you are ready to compile or \"Knit\" the document. This is what generates the .html document.\n    -   To do so, click on the Knit button toward the top of the top-left window of Rstudio. After a few moments, this should open up a preview window displaying the compiled html file.\n    -   It will also save an actual .html file in your working directory (the same location on your computer where you have saved the .Rmd file)\n    -   Try to locate this compiled .html file on your computer and open it. For most computers, .html files will open in your default web browser, such as Google Chrome or Safari.\n    -   This step is a common place where errors are detected and generated. Sometimes the compiling process fails due to errors in the R code in your code chunks or an error in the Markdown syntax. If your document fails to knit, the next step is to try to troubleshoot the error messages the compiling process generates. The best way to reduce and more easily detect errors is to \"knit as you go.\" Try to knit your document after each chunk of code you create.\n\n\n\n### LaTex\n\n[LaTex](https://www.latex-project.org/) is a typesetting program for drafting documents, much like Microsoft Word. Some advantages of using LaTex in writing empirical research papers is, once you learn the basics of the program, it can become easier to add tables, figures, and equations into a paper with little effort. The downside is that it has its own syntax, which takes a little time to learn. LaTex also has a feature called \"beamer\" which uses LaTex to generate slides. You can use this for presentations. LaTex \"compiles\" documents into pdf files.\n\nHere is one [introduction](https://www.latex-tutorial.com/tutorials/) for getting started with LaTex that starts from the installation stage. Here also is a link to a set of slides from Overleaf discussing the basics of LaTex: [Slides](https://www.overleaf.com/static/latex/learn/free-online-introduction-to-latex-part-1.pdf)\n\nYou can download the Tex distribution for your operating system [here](https://www.latex-project.org/get/#tex-distributions). In addition to this, there are many programs available for running LaTex on your computer, which range from free, very basic tools (e.g., [TexWorks](http://www.tug.org/texworks/)) to tools with fancy capabilities.\n\n[Overleaf](https://www.overleaf.com/) is an online program for drafting LaTex documents. It has a nice feature where it allows you to share a document so that multiple people can work on the document simultaneously. This makes Overleaf a great program for projects where you have co-authors. The basic tools in Overleaf are available for free, but if you want to start sharing documents with a lot of co-authors, it requires a paid account.\n\nLaTex also has the ability to integrate citations into your documents. The [part 2](https://www.overleaf.com/learn/latex/Free_online_introduction_to_LaTeX_(part_2)) tutorial from Overleaf goes over this.\n\nRStudio also has a program built-in called Sweave (.Rnw) documents that works with knitR, which weave together R code and LaTex syntax, allowing you to compile them into pdf documents and slide presentations. This is very similar to how R Markdown works, but with somewhat different syntax. See [here](https://rpubs.com/YaRrr/SweaveIntro) for an overview. Your problem sets are generally Sweave/knitR documents.\n\n### Formatting and Exporting R Results\n\nR has a number of tools, including the packages `texreg`, `xtable`, and `stargazer`, which can be used to export tables made in R to nicely formatted LaTex or html output.\n\nHere is a link to the `texreg` package [documentation](https://rpubs.com/YaRrr/SweaveIntro). Section 5 has examples of the `texreg` and `htmlreg` functions within the texreg package. These can be integrated into R Markdown and Sweave documents, and their output can be pasted into LaTex or Microsoft Word.\n\nYour choice of function will depend on where you ultimately want your results to be compiled. If you are generating results that will be compiled to pdf using LaTex, then `texreg` works well. If you are exporting results to Word, than you may wish to use the `htmlreg` function within the `texreg` package, which will generate output that can be pasted into Word.\n\nA simple example using R Markdown html output. (Note, if you wanted to export the table to Word, you would add an argument specifying `file = \"myfit.doc\"` to the function. See the above link for examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/resume.csv\")\nfit <- lm(call ~ race, data=mydata)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## First time you use texreg, install it\ninstall.packages(\"texreg\")\n```\n:::\n\n\n```{.r .cell-code}\nlibrary(texreg)\nhtmlreg(list(fit),\n        stars=c(0.001, 0.01, 0.05),\n        caption = \"Regression of Call Backs on Race\")\n```\n\n<table class=\"texreg\" style=\"margin: 10px auto;border-collapse: collapse;border-spacing: 0px;caption-side: bottom;color: #000000;border-top: 2px solid #000000;\">\n<caption>Regression of Call Backs on Race</caption>\n<thead>\n<tr>\n<th style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</th>\n<th style=\"padding-left: 5px;padding-right: 5px;\">Model 1</th>\n</tr>\n</thead>\n<tbody>\n<tr style=\"border-top: 1px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">(Intercept)</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.06<sup>&#42;&#42;&#42;</sup></td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">racewhite</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.03<sup>&#42;&#42;&#42;</sup></td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n</tr>\n<tr style=\"border-top: 1px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">R<sup>2</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">Adj. R<sup>2</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n</tr>\n<tr style=\"border-bottom: 2px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">Num. obs.</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">4870</td>\n</tr>\n</tbody>\n<tfoot>\n<tr>\n<td style=\"font-size: 0.8em;\" colspan=\"2\"><sup>&#42;&#42;&#42;</sup>p &lt; 0.001; <sup>&#42;&#42;</sup>p &lt; 0.01; <sup>&#42;</sup>p &lt; 0.05</td>\n</tr>\n</tfoot>\n</table>\n\n\nYou can add more arguments to the function to customize the name of the model and the coefficients. You can also add multiple models inside the list argument, for example, if you wanted to present a table with five regression models at once. Here is an example with two:\n\n\n\n```{.r .cell-code}\nfit2 <- lm(call ~ race + sex, data=mydata)\n\nlibrary(texreg)\nhtmlreg(list(fit, fit2),\n        stars=c(0.001, 0.01, 0.05),\n        caption = \"Regression of Call Backs on Race and Sex\")\n```\n\n<table class=\"texreg\" style=\"margin: 10px auto;border-collapse: collapse;border-spacing: 0px;caption-side: bottom;color: #000000;border-top: 2px solid #000000;\">\n<caption>Regression of Call Backs on Race and Sex</caption>\n<thead>\n<tr>\n<th style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</th>\n<th style=\"padding-left: 5px;padding-right: 5px;\">Model 1</th>\n<th style=\"padding-left: 5px;padding-right: 5px;\">Model 2</th>\n</tr>\n</thead>\n<tbody>\n<tr style=\"border-top: 1px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">(Intercept)</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.06<sup>&#42;&#42;&#42;</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.07<sup>&#42;&#42;&#42;</sup></td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">racewhite</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.03<sup>&#42;&#42;&#42;</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.03<sup>&#42;&#42;&#42;</sup></td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">sexmale</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">-0.01</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">&nbsp;</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">(0.01)</td>\n</tr>\n<tr style=\"border-top: 1px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">R<sup>2</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n</tr>\n<tr>\n<td style=\"padding-left: 5px;padding-right: 5px;\">Adj. R<sup>2</sup></td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">0.00</td>\n</tr>\n<tr style=\"border-bottom: 2px solid #000000;\">\n<td style=\"padding-left: 5px;padding-right: 5px;\">Num. obs.</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">4870</td>\n<td style=\"padding-left: 5px;padding-right: 5px;\">4870</td>\n</tr>\n</tbody>\n<tfoot>\n<tr>\n<td style=\"font-size: 0.8em;\" colspan=\"3\"><sup>&#42;&#42;&#42;</sup>p &lt; 0.001; <sup>&#42;&#42;</sup>p &lt; 0.01; <sup>&#42;</sup>p &lt; 0.05</td>\n</tr>\n</tfoot>\n</table>\n\n\n### Additional formatting examples\n\nHere are some additional examples with different formats. You can run them on your own computer to see what the output looks like.\n\nThe package `texreg` has three primary formats\n\n-   `texreg()` for LATEX output;\n-   `htmlreg()` for HTML, Markdown-compatible and Microsoft Word-compatible output;\n-   `screenreg()` for text output to the R console.\n\nIf you are working with a LaTex document, I recommend using `texreg()`, which will output LaTex syntax in your R console, which you can copy and paste into your article document.\n\nNote: this function allows you to customize model and coefficient names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(texreg)\ntexreg(list(fit, fit2),\n        stars=c(0.001, 0.01, 0.05),\n        caption = \"Regression of Call Backs on Race and Sex\",\n       custom.model.names = c(\"Bivariate\", \"Includes Sex\"),\n       custom.coef.names = c(\"Intercept\",\n                             \"Race- White\",\n                             \"Sex- Male\"))\n```\n:::\n\n\nIf you are working with a Microsoft Word document, I recommend using `htmlreg()` and specifying a file name for your output. This will export a file to your working directory, which you can copy and paste into your Word article document. Otherwise, the syntax is the same as above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(texreg)\nhtmlreg(list(fit, fit2), file = \"models.doc\",\n        stars=c(0.001, 0.01, 0.05),\n        caption = \"Regression of Call Backs on Race and Sex\",\n       custom.model.names = c(\"Bivariate\", \"Includes Sex\"),\n       custom.coef.names = c(\"Intercept\",\n                             \"Race- White\",\n                             \"Sex- Male\"))\n```\n:::\n\n\nIf you are trying to read the output in your R console, that's when I would use `screenreg()`. However, for professional manuscript submissions, I would recommend the other formats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(texreg)\nscreenreg(list(fit, fit2), \n        stars=c(0.001, 0.01, 0.05),\n        caption = \"Regression of Call Backs on Race and Sex\",\n       custom.model.names = c(\"Bivariate\", \"Includes Sex\"),\n       custom.coef.names = c(\"Intercept\",\n                             \"Race- White\",\n                             \"Sex- Male\"))\n```\n:::\n\n\nThe package `stargazer` allows similar options. I don't think there are particular advantages to either package. Whatever comes easiest to you. The default for stargazer will output LaTex code into your R console.\n\n-   Note that the syntax is similar but has slightly different argument names from the `texreg` package.\n-   Also, the intercept is at the bottom by default for `stargazer`. Be careful of the covariate ordering when you add labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stargazer)\nstargazer(list(fit, fit2), \n        star.cutoffs=c(0.05,0.01, 0.001),\n        title= \"Regression of Call Backs on Race and Sex\",\n        dep.var.labels.include = F,\n       column.labels = c(\"Call Back\", \"Call Back\"),\n       covariate.labels = c(\"Race- White\",\n                             \"Sex- Male\",\n                             \"Intercept\"))\n```\n:::\n\n\nYou can adjust the type of output in `stargazer` for other formats, similar to `texreg`. Here is an example of Microsoft Word output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stargazer)\nstargazer(list(fit, fit2), out = \"modelstar.doc\", type=\"html\",\n        star.cutoffs=c(0.05,0.01, 0.001),\n        dep.var.labels.include = F,\n        title= \"Regression of Call Backs on Race and Sex\",\n       column.labels = c(\"Call Back\", \"Call Back\"),\n       covariate.labels = c(\"Race- White\",\n                             \"Sex- Male\",\n                             \"Intercept\"))\n```\n:::\n\n\n### Additional Table Types\n\nSometimes you might want to create tables that are not from regression models, such as tables for descriptive statistics. R has other packages for tables of this type.\n\nFor example `xtable` can create simple html and latex tables. You just have to supply the function with a table object or matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xtable)\ntable1 <- table(race = mydata$race, sex = mydata$sex)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## LaTeX\nxtable(table1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Word\nprint(xtable(table1), type=\"html\", file = \"crosstab.doc\")\n```\n:::\n\n\n```{.r .cell-code}\n## Html\nprint(xtable(table1), type=\"html\")\n```\n\n<!-- html table generated in R 4.2.0 by xtable 1.8-4 package -->\n<!-- Sun Sep 24 17:02:19 2023 -->\n<table border=1>\n<tr> <th>  </th> <th> female </th> <th> male </th>  </tr>\n  <tr> <td align=\"right\"> black </td> <td align=\"right\"> 1886 </td> <td align=\"right\"> 549 </td> </tr>\n  <tr> <td align=\"right\"> white </td> <td align=\"right\"> 1860 </td> <td align=\"right\"> 575 </td> </tr>\n   </table>\n\n\n## Exploratory Data Analysis Tools\n\nOne of the first things you may want to do when you have a new dataset is to explore! Get a sense of the variables you have, their class, and how they are coded. There are many functions in base R that help with this, such as `summary()`, `table()`, and descriptive statistics like `mean` or `quantile`.\n\nLet's try this with the built-in `mtcars` data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mtcars\")\n\nsummary(mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.000   4.000   6.000   6.188   8.000   8.000 \n```\n:::\n\n```{.r .cell-code}\nquantile(mtcars$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     0%     25%     50%     75%    100% \n1.51300 2.58125 3.32500 3.61000 5.42400 \n```\n:::\n\n```{.r .cell-code}\nmean(mtcars$mpg, na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20.09062\n```\n:::\n\n```{.r .cell-code}\nsd(mtcars$mpg, na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.026948\n```\n:::\n\n```{.r .cell-code}\ntable(gear=mtcars$gear, carb=mtcars$carb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    carb\ngear 1 2 3 4 6 8\n   3 3 4 3 5 0 0\n   4 4 4 0 4 0 0\n   5 0 2 0 1 1 1\n```\n:::\n:::\n\n\nAs discussed in the visualization, you can also quickly describe univariate data with histograms, barplots, or density plots using base R or `ggplot`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mtcars$mpg, breaks=20, main=\"Histogram of MPG\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(mtcars$mpg, na.rm=T),  \n     main=\"Distribution of MPG\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-56-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbarplot(table(mtcars$gear), main=\"Barplot of Gears\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-56-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(mtcars, aes(mpg))+\n  geom_histogram(bins=20)+\n  ggtitle(\"Histogram of MPG\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg))+\n  geom_density()+\n  ggtitle(\"Distribution of MPG\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-57-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mtcars, aes(gear))+\n  geom_bar(stat=\"count\")+\n  ggtitle(\"Barplot of Gears\")\n```\n\n::: {.cell-output-display}\n![](02-ROverview_files/figure-html/unnamed-chunk-57-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "02-ROverview_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}