pr.imp
pr.imp <- prediction(fit.probit5, at= list(racresent = seq(0, 1,.0625),
condition2=1),
calculate_se = TRUE)
library(prediction)
pr.imp <- prediction(fit.probit5, at= list(racresent = seq(0, 1,.0625),
condition2=1),
calculate_se = TRUE)
pr.imp
## Let's store the summary output this time
## And to make it easier to plot, we'll store as dataframe
pr.imp.df <- summary(pr.imp)
pr.imp.df
pr.comb <- rbind(pr.imp, pr.exp)
library(marginaleffects)
pr.imp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= seq(0, 1,.0625),
condition2=1))
pr.exp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= seq(0, 1,.0625),
condition2=2))
pr.comb <- rbind(pr.imp, pr.exp)
pr.comb
pr.imp$condition <- "Implicit"
pr.exp$condition <- "Explicit"
pr.comb <- rbind(pr.imp, pr.exp)
pr.comb
ggplot(pr.comb, aes(x=racresent,
y= Estimate,
color=condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=condition), alpha=.5)+
xlab("Racial Resentment")+
theme_bw()+
theme(legend.position = "bottom")
library(ggplot2)
ggplot(pr.comb, aes(x=racresent,
y= Estimate,
color=condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=condition), alpha=.5)+
xlab("Racial Resentment")+
theme_bw()+
theme(legend.position = "bottom")
pr.comb
class(pr.comb)
ggplot(pr.comb, aes(x=racresent,
y= estimate,
color=condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=condition),
alpha=.5)+
xlab("Racial Resentment")+
theme_bw()
pr.imp$Condition <- "Implicit"
pr.exp$Condition <- "Explicit"
pr.comb <- rbind(pr.imp, pr.exp)
marest <- avg_comparisons(fit.probit5,
variables = list(condition = c(1, 2)),
newdata = datagridcf(racresent = seq(0, 1,.0625)))
marest <- avg_comparisons(fit.probit5,
variables = list(condition2 = c(1, 2)),
newdata = datagridcf(racresent = seq(0, 1,.0625)))
marest
library(marginaleffects)
marest <- avg_comparisons(fit.probit5,
variables = list(condition2 = c(1, 2)),
newdata = datagrid(racresent = seq(0, 1,.0625)))
marest
marest$estimate
library(marginaleffects)
marest <- avg_comparisons(fit.probit5,
variables = list(condition2 = c(1, 2)),
newdata = datagrid(racresent = c(0, 1)))
marest$estimate
marest$estimate
datagrid(racresent = c(0, 1))
library(marginaleffects)
marest <- avg_comparisons(fit.probit5,
by ="condition2",
newdata = datagrid(racresent = c(0, 1)))
marest$estimate
marest
marest <- avg_comparisons(fit.probit5,
by ="racresent",
variables = list(condition2=c(1,2)),
newdata = datagrid(racresent = c(0, 1)))
marest
marest <- avg_comparisons(fit.probit5,
by ="racresent",
variables = list(condition2=c(1,2)),
newdata = datagrid(racresent = seq(0, 1, .0625)))
marest$estimate
marest
ggplot(marest, aes(x=racresent, y=eME))+
geom_line()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), alpha=.5, width=0)+
theme_bw()+
xlab("Racial Resentment")+
ggtitle("AME: Explicit - Implicit Condition on Pr(Ad About Race)")+
geom_hline(yintercept = 0, color="red")
ggplot(marest, aes(x=racresent, y=estimate))+
geom_line()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), alpha=.5, width=0)+
theme_bw()+
xlab("Racial Resentment")+
ggtitle("AME: Explicit - Implicit Condition on Pr(Ad About Race)")+
geom_hline(yintercept = 0, color="red")
marest <- margins(fit.probit5, at= list(racresent = seq(0, 1,.0625)),
variables="condition2",
change = c(1,2),
vce="delta",
type="response")
library(margins)
marest <- margins(fit.probit5, at= list(racresent = seq(0, 1,.0625)),
variables="condition2",
change = c(1,2),
vce="delta",
type="response")
## Store summary as dataframe
marest.df <- summary(marest)
marest.df
library(marginaleffects)
marest <- avg_comparisons(fit.probit5,
by ="racresent",
variables = list(condition2=c(1,2)),
newdata = datagridcf(racresent = seq(0, 1, .0625)))
marest
ggplot(marest, aes(x=racresent, y=estimate))+
geom_line()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), alpha=.5, width=0)+
theme_bw()+
xlab("Racial Resentment")+
ggtitle("AME: Explicit - Implicit Condition on Pr(Ad About Race)")+
geom_hline(yintercept = 0, color="red")
library(marginaleffects)
marest <- avg_comparisons(fit.probit5,
by ="racresent",
variables = list(condition2=c(1,2)),
newdata = datagridcf(racresent = seq(0, 1, .0625)))
library(marginaleffects)
marest2 <- avg_comparisons(fit.probit5,
by ="racresent",
variables = list(condition2=c(1,2)),
newdata = datagridcf(racresent = seq(0, 1, .0625)))
marest2
## Original regression
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
anes <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/anesdems.csv")
anes$partbinary <- ifelse(anes$participation > 0, 1, 0)
## Original regression
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
## We need to build our bootstrap procedure
## Let's assume we just want 1 iteration
## Step 1: sample to generate new data
## this selects N row numbers from mids, with replacement
wrows <- sample(x =1:nrow(anes), size = nrow(anes), replace = T)
## Create subset of data based on these rows
subdata <- anes[wrows, ]
## Step 2: run your regression model with the new data
boot.logit <-glm(partbinary ~ female + edu + age + sexism,
family = binomial(link = "logit"), data = subdata)
## Step 3: generate average predicted probability
Xboot <- model.matrix(boot.logit)
Xboot[, "sexism"] <- 1
Bh <- coef(boot.logit)
p.boot <- mean(plogis(Xboot %*% Bh))
p.boot
## We need to build our bootstrap function
## Step 4: Let's wrap our current steps into a function that we can replicate
## Note: all we need as an input is our data.frame anes
## I will label it something generic to show how a function can work
myboot <- function(df){
wrows <- sample(x =1:nrow(df), size = nrow(df), replace = T)
## Create subset of data based on these rows
subdata <- df[wrows, ]
## Step 2: run your regression model with the new data
boot.logit <-glm(partbinary ~ female + edu + age + sexism,
family = binomial(link = "logit"), data = subdata)
## Step 3: generate average predicted probability
Xboot <- model.matrix(boot.logit)
Xboot[, "sexism"] <- 1
Bh <- coef(boot.logit)
p.boot <- mean(plogis(Xboot %*% Bh))
return(p.boot)
}
## This may take a minute to run.
## We will do just 50, Normally you will want this to be more like 1000
set.seed(1234) # this helps us get the same results each time, good for reproducibility
myestimates <- replicate(50, myboot(anes))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=..density..)) + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=after_stat(density)) + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=after_stat(density)) + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=after_stat(density))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=..density..)) + geom_density(color="red")
## This may take a minute to run.
## We will do just 500, Normally you will want this to be more like 1000
set.seed(1234) # this helps us get the same results each time, good for reproducibility
myestimates <- replicate(500, myboot(anes))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=..density..)) + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=after_stat("density"))) + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram() + geom_density(color="red")
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(after_stat(density))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(after_stat(density))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(after_stat(density)) )
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(aes(y=after_stat(density)) )
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fil="gray" )
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fil="blue" )
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue" )
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(after_stat(density)))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density)))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density()
## Find the original point estimate
Bh <- coef(out.logit)
X1 <- model.matrix(out.logit)
X1[, "sexism"] <- 1
pe1 <- mean(plogis(X1 %*% Bh))
## Normal
c((pe1 - qnorm(.975)*sqrt(var(myestimates))),(pe1 + qnorm(.975)*sqrt(var(myestimates))))
## Percentile
quantile(myestimates, c(0.025, .975))
## Bias correction
bc <- 2*pe1 - myestimates
quantile(bc, c(0.025, .975))
pe.me <- avg_predictions(out.logit, type = "response",
by = "sexism",
newdata = datagridcf(sexism= 1))
pe.me
pe1
pe.me <- avg_predictions(out.logit, type = "response",
by = "sexism",
newdata = datagridcf(sexism= 1))
c(pe.me$estimate, pe.me$conf.low, pe.me$conf.high)
setwd("~/Dropbox/Rutgers Teaching/MLE/fall23/lectures")
knitr::purl("qoislides.qmd")
anes <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/anesdems.csv")
anes$partbinary <- ifelse(anes$participation > 0, 1, 0)
## logit
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
summary(logit)
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
summary(out.logit)
sexism1 <- predict(out.logit, newdata =
data.frame( female=1,
edu = 2,
#age = 40,
sexism = 1),
type = "response")
data.frame( female=1,
edu = 2,
age = 40,
sexism = 1)
sexism1 <- predict(out.logit, newdata =
data.frame( female=1,
edu = 2,
age = 40,
sexism = 1),
type = "response")
sexism1
## Predicted probability when sexism = 1 covariates = observed values
X <- model.matrix(out.logit)
X
X[, "sexism"] <- 1
X
X <- model.matrix(out.logit)
X[, "sexism"] <- 1
X
B <- coef(out.logit)
etahat <- X %*% B
etahat
avg.prob.1 <- mean(prob)
X <- model.matrix(out.logit)
X[, "sexism"] <- 1
X
B <- coef(out.logit)
etahat <- X %*% B
prob <- plogis(etahat)
avg.prob.1 <- mean(prob)
avg.prob.1
sexism0 <- predict(out.logit, newdata =
data.frame( female=1,
edu = 2,
age = 40,
sexism = 0),
type = "response")
## Difference
sexism1 - sexism0
## Predicted probability when sexism = 0 covariates = observed values
X <- model.matrix(out.logit)
X[, "sexism"] <- 0
B <- coef(out.logit)
etahat <- X %*% B
prob <- plogis(etahat)
avg.prob.0 <- mean(prob)
## Difference
avg.prob.1 - avg.prob.0
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
## Step 1: sample to generate new data
## this selects N row numbers from anes, with replacement
wrows <- sample(x =1:nrow(anes), size = nrow(anes), replace = T)
1:nrow(anes)
nrow(anes)
## Step 1: sample to generate new data
## this selects N row numbers from anes, with replacement
wrows <- sample(x =1:nrow(anes), size = nrow(anes), replace = T)
wrows
out.logit <- glm(partbinary ~ female + edu + age + sexism, data=anes,
family = binomial(link="logit"))
## We need to build our bootstrap procedure
## Let's assume we just want 1 iteration
## Step 1: sample to generate new data
## this selects N row numbers from anes, with replacement
wrows <- sample(x =1:nrow(anes), size = nrow(anes), replace = T)
## Create subset of data based on these rows
subdata <- anes[wrows, ]
wrows
subdata <- anes[wrows, ]
boot.logit <-glm(partbinary ~ female + edu + age + sexism,
family = binomial(link = "logit"), data = subdata)
Xboot <- model.matrix(boot.logit)
Xboot[, "sexism"] <- 1
Bh <- coef(boot.logit)
p.boot <- mean(plogis(Xboot %*% Bh))
myboot <- function(df){
wrows <- sample(x =1:nrow(df), size = nrow(df), replace = T)
## Create subset of data based on these rows
subdata <- df[wrows, ]
## Step 2: run your regression model with the new data
boot.logit <-glm(partbinary ~ female + edu + age + sexism,
family = binomial(link = "logit"), data = subdata)
## Step 3: generate average predicted probability
Xboot <- model.matrix(boot.logit)
Xboot[, "sexism"] <- 1
Bh <- coef(boot.logit)
p.boot <- mean(plogis(Xboot %*% Bh))
return(p.boot)
}
set.seed(1234) # this helps us get the same results each time, good for reproducibility
myestimates <- replicate(500, myboot(anes))
library(ggplot2)
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density()
## Percentile
quantile(myestimates, c(0.025, .975))
## Percentile
quantile(myestimates, c(0.025, .975))
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density() +
geom_vline(mapping=(xintercept=.60))
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density() +
geom_vline(xintercept=.60))
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density() +
geom_vline(xintercept=.60))
## Percentile
quantile(myestimates, c(0.025, .975))
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density()
+ geom_vline(xintercept = .6, color="purple")
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density()
+ geom_vline(xintercept = .7, color="purple")
ggplot(data.frame(x = myestimates), aes(x = myestimates)) +
geom_histogram(fill="blue", aes(y=after_stat(density))) + geom_density() +geom_vline(xintercept = .7, color="purple")
library(marginaleffects)
pe.me <- avg_predictions(out.logit, type = "response",
by = "sexism",
newdata = datagridcf(sexism= 1))
pe.me
pe.me
## your turn
fit.probit5 <- glm(abtrace1 ~ factor(condition2)*racresent
+ factor(condition2)*oldfash + racresent,
data=study, family=binomial(link = "probit"))
study <- import("https://github.com/ktmccabe/teachingdata/blob/main/ssistudyrecode.dta?raw=true")
## your turn
fit.probit5 <- glm(abtrace1 ~ factor(condition2)*racresent
+ factor(condition2)*oldfash + racresent,
data=study, family=binomial(link = "probit"))
fit.probit5 <- glm(abtrace1 ~ factor(condition2)*racresent
+ factor(condition2)*oldfash ,
data=study, family=binomial(link = "probit"))
summary(fit.probit5)
seq(0, 1, 0.0625)
pr.imp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= seq(0, 1,.0625),
condition2=1))
pr.imp
pr.imp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= c(0, 1),
condition2=1))
pr.imp
seq(from=0, to=1, 0.0625)
pr.imp
pr.imp$Condition <- "Implicit"
pr.exp$Condition <- "Explicit"
library(ggplot2)
ggplot(pr.comb, aes(x=racresent,
y= estimate,
color=Condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=Condition),
alpha=.5)+
xlab("Racial Resentment")+
ylab("Predicted Probability")+
ggtitle("Believe Ad is About Race by Condition & Racial Resentment")+
theme_bw()+
theme(legend.position = "bottom")
fit.probit5 <- glm(abtrace1 ~ factor(condition2) +
racresent +
oldfash+
factor(condition2)*racresent
+ factor(condition2)*oldfash ,
data=study, family=binomial(link = "probit"))
summary(fit.probit5)
library(marginaleffects)
pr.imp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= c(0, 1),
condition2=1))
pr.exp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= seq(0, 1,.0625),
condition2=2))
## combine into one dataframe with labels
pr.imp$Condition <- "Implicit"
pr.exp$Condition <- "Explicit"
pr.comb <- rbind(pr.imp, pr.exp)
## plotting
library(ggplot2)
ggplot(pr.comb, aes(x=racresent,
y= estimate,
color=Condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=Condition),
alpha=.5)+
xlab("Racial Resentment")+
ylab("Predicted Probability")+
ggtitle("Believe Ad is About Race by Condition & Racial Resentment")+
theme_bw()+
theme(legend.position = "bottom")
pr.imp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= c(0, 1, 0.625),
condition2=1))
pr.exp <- avg_predictions(fit.probit5, type = "response",
by = "racresent",
newdata = datagridcf(racresent= seq(0, 1,.0625),
condition2=2))
## combine into one dataframe with labels
pr.imp$Condition <- "Implicit"
pr.exp$Condition <- "Explicit"
pr.comb <- rbind(pr.imp, pr.exp)
## plotting
library(ggplot2)
ggplot(pr.comb, aes(x=racresent,
y= estimate,
color=Condition))+
geom_line()+
geom_ribbon(aes(ymin=conf.low, ymax=conf.high, fill=Condition),
alpha=.5)+
xlab("Racial Resentment")+
ylab("Predicted Probability")+
ggtitle("Believe Ad is About Race by Condition & Racial Resentment")+
theme_bw()+
theme(legend.position = "bottom")
