read.csv("dhs_ipv.csv")
## Use this chunk to load the data with read.csv()
#read.csv("dhs_ipv.csv", stringsAsFactors = T)
dhs <- read.csv("dhs_ipv.csv", stringsAsFactors = T)
dim(dhs)
## summarizing data
range(dhs$year, na.rm=T)
## summarizing data
range(dhs$beat_burnfood, na.rm=T)
min(dhs$beat_burnfood, na.rm=T)
max(dhs$beat_burnfood, na.rm=T)
## Scatterplots and correlations, yay!
plot(x=dhs$no_media, y=dhs$beat_burnfood,
main = "Relationship between no_media and beat_burnfood",
xlab = "Percentage of women living under a rock",
ylab = "Percentage of Women who are not allies")
cor(dhs$no_media, dhs$beat_burnfood, use = "pairwise")
## Time for boxplots!
boxplot(dhs$beat_goesout ~ dhs$region,
main = "Comparison between regions and their thoughts on husbands beating wives",
ylab = "Percentage of Patriarchal Brainwashing",
xlab = "Regions of the world")
median(dhs$beat_goesout[dhs$region == "Middle East and Central Asia"])
median(dhs$beat_goesout[dhs$region == "Asia"], na.rm=T)
median(dhs$beat_goesout[dhs$region == "Latin America"], na.rm=T)
median(dhs$beat_goesout[dhs$region == "Sub-Saharan Africa"], na.rm=T)
latino <- subset(dhs, region == "Latin America")
yravg <- c(10.80, 4.50, 2.40, 5.40, 0.60, 7.25, 1.10, 3.30, 2.70, 0.80, 2.60, 5.80, 0.60)
plot(yravg, type = "o")
plot(yravg,type = "o", col = "skyblue", xlab = "Year", ylab = "Average support for domestic support if food is burnt",
main = "Latin America Chart",
xlim = c(2000, 2013))
plot(yravg,type = "o", col = "skyblue", xlab = "Year", ylab = "Average support for domestic support if food is burnt",
main = "Latin America Chart",
xlim = c(2000, 2013),
ylim = c(0, 11))
lines(yravg,type = "o", col  = "skyblue")
setwd("~/Dropbox/Rutgers Teaching/MLE/fall23/lectures")
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
paste0("\n \\", "footnotesize","\n\n", x, "\n\n \\small")
})
library(foreign)
bolton <- read.dta("bolton_thrower_ajps_data_v12.dta")
fitn <- glm.nb(allnoncerm_eo ~ divided + inflation +
spending_percent_gdp + war + lame_duck +
administration_change + trend +
+  taft + wilson + harding
+ coolidge + hoover + fdr, link="log",
data = subset(bolton, year < 1945))
library(MASS)
fitn <- glm.nb(allnoncerm_eo ~ divided + inflation +
spending_percent_gdp + war + lame_duck +
administration_change + trend +
+  taft + wilson + harding
+ coolidge + hoover + fdr, link="log",
data = subset(bolton, year < 1945))
b <- coef(fitn)
Xdiv <- model.matrix(fitn)
Xdiv[, "divided"] <- 1
pc.div <- mean(exp(Xdiv%*%b))
Xuni <- model.matrix(fitn)
Xuni[, "divided"] <- 0
pc.uni <- mean(exp(Xuni%*%b))
c(pc.uni, pc.div)
library(marginaleffects)
pc.me <- avg_predictions(fitn,  by="divided", newdata=datagridcf(divided = c(0, 1)), type = "response")
pc.me$estimate
avg.diff.me <- avg_comparisons(fitn, variables=list(divided=c(0,1)), type="response")
avg.diff.me$estimate
diffexo <- pc.div - pc.uni
diffexo/pc.uni
exp(coef(fitn))
fit.nb <- glm.nb(allnoncerm_eo ~ divided + inflation + spending_percent_gdp +
war + lame_duck + administration_change + trend +
truman + ike + jfk + lbj +
nixon + ford +
carter + reagan + bush41 + clinton + bush43,
link="log",
data = subset(bolton, year > 1944))
library(equatiomatic)
equatiomatic::extract_eq(fit.nb, wrap=T, terms_per_line = 2)
library(rio)
library(rio)
zurich <- import("zurich_data.dta")
zurich <- import("~/Downloads/zurich_data.dta")
library(MASS)
head(zurich)
fit <- glm.nb(totalvote_abs ~ factor(migrant_dum), data=zurich, link="log")
fit <- glm.nb(totalvote_abs ~ factor(migrant_dum) + age  + age_sq +
female + incumbent + ticketpos + precumulated +
factor(ticket_num) + factor(year)*factor(district_num) +
occ_in_training + occ_retired + occ_academic_title + factor(occ_isco)  , data=zurich, link="log")
summary(fit)
coef(fit)["factor(migrant_dum)1"]
library(foreign)
ker <- read.dta("https://github.com/ktmccabe/teachingdata/blob/main/kerevel.dta?raw=true")
## outcome
table(ker$genderimmedambcat3)
class(ker$genderimmedambcat3)
## Sets a level as the base category for the factor
ker$genderimmedambcat3 <- relevel(ker$genderimmedambcat3, ref = "other")
## install.packages("nnet")
library(nnet)
fit0 <- multinom(genderimmedambcat3 ~ factor(female), data = ker)
## outcome
table(ker$genderimmedambcat3)
class(ker$genderimmedambcat3)
## Sets a level as the base category for the factor
ker$genderimmedambcat3 <- relevel(ker$genderimmedambcat3, ref = "other")
## install.packages("nnet")
library(nnet)
fit0 <- multinom(genderimmedambcat3 ~ factor(female), data = ker)
## Marginal effects code
library(marginaleffects)
table(ker$genderimmedambcat3)
## Sets a level as the base category for the factor
ker$genderimmedambcat3 <- relevel(ker$genderimmedambcat3, ref = "other")
p.allgroups <- avg_predictions(fit0,
by="female",
newdata = datagridcf(female = 1))
p.allgroups
p.allgroups <- avg_predictions(fit0,
by="female",
newdata = datagridcf(female = 0))
p.allgroups
sum(p.allgroups$estimate)
me.allgroups <- avg_comparisons(fit0,
variables= list(female = c(0,1)))
me.allgroups
library(ggplot2)
ggplot(me.allgroups, aes(y=estimate, x=group))+
geom_point()
ggplot(me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high))
ggplot(me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high))+
coord_flip()
ggplot(me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=0)+
coord_flip()
me.allgroups
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()
me.allgroups
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_ribbon(aes(ymin = conf.low, ymax=conf.high))
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high), width=0)
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high), width=0)+
coord_flip()
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()+
geom_vline(xintercept = 0, color="red")
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()+
geom_hline(yintercept = 0, color="red")
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()+
geom_hline(yintercept = 0, color="red", alpha=.3)
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()+
geom_hline(yintercept = 0, color="red", alpha=.3, linetype="dotted")
ggplot(data=me.allgroups, aes(y=estimate, x=group))+
geom_point()+
geom_errorbar(aes(ymin = conf.low, ymax=conf.high))+
coord_flip()+
geom_hline(yintercept = 0, color="red", alpha=1, linetype="dotted")
demo <- data.frame(country = c("USA", "Albania", "Turkey", "China", "Sudan"),
democracy_score = c(19, 16, 16, 5, 10))
demo
econ <- data.frame(country = c("China", "Albania", "Turkey", "USA", "Sudan"),
gdp_pc = c(12000, 10000, 9000, 20000, 500))
econ
?merge
df <- merge(demo, econ, by = "country")
df
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan"),
year = 1994:1996),
democracy_score = round(runif(9, 0, 20), 0))
demo
econ <- data.frame(expand.grid(year = 1994:1996,
country = c("USA", "China", "Sudan")),
gdp_pc = round(runif(9, 1000, 20000), 0))
econ
df2 <- merge(demo, econ, by = c("country", "year"))
df2
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan"),
year = 1994:1996),
democracy_score = round(runif(9, 0, 20), 0))
demo
econ <- data.frame(expand.grid(year = 1994:1996,
country = c("United States", "China", "Sudan")),
gdp_pc = round(runif(9, 1000, 20000), 0))
econ
df2 <- merge(demo, econ, by = c("country", "year"))
df2
nrow(demo)
nrow(econ)
nrow(df2)
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan", "Canada"),
year = 1994:1996),
democracy_score = round(runif(9, 0, 20), 0))
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan", "Canada"),
year = 1994:1996),
democracy_score = round(runif(12, 0, 20), 0))
demo
econ <- data.frame(expand.grid(year = 1994:1996,
country = c("USA", "China", "Sudan")),
gdp_pc = round(runif(9, 1000, 20000), 0))
econ
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan", "Canada"),
year = 1994:1996),
democracy_score = round(runif(12, 0, 20), 0))
demo
econ <- data.frame(expand.grid(year = 1994:1996,
country = c("USA", "China", "Sudan")),
gdp_pc = round(runif(9, 1000, 20000), 0))
econ
df2 <- merge(demo, econ, by = c("country", "year"))
df2
nrow(demo)
nrow(econ)
nrow(df2)
df2 <- merge(demo, econ, by = c("country", "year"),
all.x=TRUE, all.y=TRUE)
df2
length(df2$gdp_pc[is.na(df2$gdp_pc)])
summary(df2$gdp_pc)
demo <- data.frame(expand.grid(country = c("United States", "China", "Sudan", "Canada"),
year = 1994:1996),
democracy_score = round(runif(12, 0, 20), 0))
demo
econ <- data.frame(expand.grid(year = 1994:1996,
country = c("USA", "China", "Sudan")),
gdp_pc = round(runif(9, 1000, 20000), 0))
econ
df2 <- merge(demo, econ, by = c("country", "year"))
df2
df2 <- merge(demo, econ, by = c("country", "year"),
all.x=TRUE, all.y=TRUE)
df2
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan"),
year = 1994:1996),
democracy_score = round(runif(9, 0, 20), 0))
demo
demo <- data.frame(expand.grid(country = c("USA", "China", "Sudan"),
year = 1994:1996),
democracy_score = round(runif(9, 0, 20), 0))
region <- data.frame(country = c("USA", "China", "Sudan"),
region = c("America", "Asia", "Africa"))
demo
region
merge(demo, region, by = "country")
merge(demo, region, by = "country")
merge(demo, region, by = "country")
df3 <-  merge(demo, region, by = "country")
df3 <-  merge(demo, region, by = "country")
df3
library(foreign)
bolton <- read.dta("bolton_thrower_ajps_data_v12.dta")
setwd("/Users/ktmccabe/Dropbox/Rutgers Teaching/MLE/fall23/lectures")
library(foreign)
bolton <- read.dta("bolton_thrower_ajps_data_v12.dta")
## look at the data
plot(bolton$year, bolton$allnoncerm_eo, pch =20,
main = "Executive Orders by Year", cex.main = .8, ylim = c(0, 500))
abline(v=1945, lty =2)
fit <- glm(allnoncerm_eo ~ divided + inflation + spending_percent_gdp + war + lame_duck +
administration_change + trend +
+  taft + wilson + harding
+ coolidge + hoover + fdr, family = "poisson",
data = subset(bolton, year < 1945))
summary(fit)$coefficients[2,]
round(summary(fit)$coefficients[2,], digits = 3)
summary(fit)$coefficients[2,]
round(summary(fit)$coefficients[2,], digits = 2)
fit.biv <- glm(allnoncerm_eo ~ divided ,
family = "poisson",
data = subset(bolton, year < 1945))
summary(fit.biv)
yhats <- predict(fit.biv, data.frame(divided = c(0, 1)), type="response")
yhats
## multiplier- IRR
exp(coef(fit.biv)["divided"])
## getting to divided=1 from divided = 0
yhats[1]*(exp(coef(fit.biv)["divided"]))
yhats[1]
## getting to divided=1 from divided = 0
yhats[1]*(exp(coef(fit.biv)["divided"]))
## percent change interpretation
(exp(coef(fit.biv)["divided"]) - 1) * 100
((yhats[2] - yhats[1])/yhats[1]) * 100
knitr::opts_chunk$set(echo = TRUE, out.width="90%")
polls2020 <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/pollsandresults2020.csv", stringsAsFactors = T)
head(polls2020)
## Biden's margin of victory (or defeat) in  the polls
polls2020$polldiff <- polls2020$BidenPoll - polls2020$TrumpPoll
## Biden's margin of victory (or defeat) in the actual election result
polls2020$resultdiff <- polls2020$BidenResult - polls2020$TrumpResult
## Iteration vector
states <- unique(polls2020$stateid)
## Container vectors
polls.margin <- result.margin <- bidenvotes <-
rep(NA, length(states))
names(polls.margin) <- names(result.margin) <-
names(bidenvotes)  <-as.character(unique(states))
## Loop
for(i in 1:length(states)){
## Subset the data to a particular state
subdata <- subset(polls2020, stateid == states[i] )
## Within that state, subset to just the most recent polls
subdata <- subset(subdata, days_to_election < 15 |
days_to_election == min(subdata$days_to_election) )
## Store three things for each state
## The actual election margin (how much Biden was ahead or behind)
result.margin[i] <- mean(subdata$resultdiff)
## Our predicted election margin (how much Biden was ahead or behind)
polls.margin[i] <- mean(subdata$polldiff)
## Based on our prediction, assign Biden the state's electoral votes (if we predict he wins), 0 electoral votes if he loses
bidenvotes[i] <- ifelse(mean(subdata$polldiff) > 0,
unique(subdata$EV), 0)
}
bidenvotes
actualwins <- ifelse(result.margin > 0, "Biden Won", "Trump Won")
# code for problem 1
# code for problem 2
# code for problem 3
predictionerror <- polls.margin - result.margin
# plotting code
bidenvotes
result.margin
polls.margin
actualwins <- ifelse(result.margin > 0, "Biden Won", "Trump Won")
predictedwins <- ifelse(polls.margin > 0, "Biden Predicted to Win", "Trump Predicted Win")
predictedwins
table(actualwins, predictedwins)
# code for problem 3
actualwins[actualswins == "Trump Won" & predictedwins == "Biden Predicted to Win"]
# code for problem 3
actualwins[actualswins == "Trump Won" & predictedwins == "Biden Predicted Win"]
# code for problem 3
actualwins[actualwins == "Trump Won" & predictedwins == "Biden Predicted Win"]
# code for problem 3
actualwins[actualwins == "Trump Won" & predictedwins == "Biden Predicted Win"]
actualwins <- ifelse(result.margin > 0, "Biden Won", "Trump Won")
# code for problem 1
predictedwins <- ifelse(polls.margin > 0, "Biden Predicted to Win", "Trump Predicted Win")
predictedwins
# code for problem 3
actualwins[actualwins == "Trump Won" & predictedwins == "Biden Predicted to Win"]
predictionerror <- polls.margin - result.margin
predictionerror <- polls.margin - result.margin
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror))
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
names(predictionerror)
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror))
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=3)
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=1)
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=1, cex.axis = .5)
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=1, cex.axis = .5)
text(x= predictionerror, y = 1:length(predictionerror), names(predictionerror))
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n"
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=1, cex.axis = .5)
text(x= predictionerror, y = 1:length(predictionerror), names(predictionerror))
# plotting code
plot(x= predictionerror, y = 1:length(predictionerror),
yaxt="n", type="n",
)
axis(2, at= 1:length(predictionerror), labels = names(predictionerror), las=1, cex.axis = .5)
text(x= predictionerror, y = 1:length(predictionerror), names(predictionerror))
baseball <- read.csv("baseball.csv")
baseball <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/baseball.csv")
head(baseball)
###################################################
### Regression formula
###################################################
fit <- lm(RS ~ OBP, data = baseball)
## regression coefficients
coef(fit)
fit <- lm(RS ~ OBP, data = baseball)
## regression coefficients
coef(fit)
###################################################
### Prediction from regression
###################################################
predict(fit, data.frame(OBP=.300))
coef(fit)[1]
coef(fit)[2]*.300
## Alternative manual calculation: a + b*x
coef(fit)[1] + coef(fit)[2]*.300
predict(fit, data.frame(OBP=.500))
library(cregg)
mm
table(baseball$W)
baseball$Playoffs
table(baseball$League)
fit <- lm(Playoffs ~ League, data=baseball)
coef(fit)
predict(fit, data.frame(League=c("AL", "NL")))
fit <- lm(Playoffs ~ 0 + League, data=baseball)
coef(fit)
fit <- lm(Playoffs ~ Team, data=baseball)
coef(fit)
predict(fit, data.frame(Team = "NYM"))
fit <- lm(Playoffs ~ 0+ Team, data=baseball)
coef(fit)["NYM"]
coef(fit)["TeamNYM"]
`V-Dem-CY-Core-v13` <- readRDS("/Users/ktmccabe/Downloads/V-Dem-CY-Core_R_v13/V-Dem-CY-Core-v13.rds")
View(`V-Dem-CY-Core-v13`)
install.packages("vdemdata")
data(mtcars)
head(mtcars)
feminineissues <- c(4, 8)
mtcars$cyl %in% feminineissues
mtcars$feminineissuefirst <- ifelse(mtcars$cyl %in% feminineissues, 1,0)
head(mtcars)
paste(mtcars$vs, mtcars$carb, mtcars$am, sep=",")
i <- 1
rowi <- mtcars[i,]
rowi
rowiissues <- paste(mtcars$vs, mtcars$carb, mtcars$am, sep=",")
rowiissues
rowiissues <- paste(rowi$vs, rowi$carb, rowi$am, sep=",")
rowiissues
ifelse(4 %in% rowiissues, "yes", "no")
rowiissues <- c(rowi$vs, rowi$carb, rowi$am)
rowiissues
ifelse(4 %in% rowiissues, "yes", "no")
for(i in 1:nrow(mtcars)){
rowi <- mtcars[i,]
rowiissues <- c(rowi$vs, rowi$carb, rowi$am)
mtcars$mentioned1[i] <- ifelse(4 %in% rowiissues, "yes", "no")
}
for(i in 1:nrow(mtcars)){
rowi <- mtcars[i,]
rowiissues <- c(rowi$vs, rowi$carb, rowi$am)
mtcars$mentioned4[i] <- ifelse(4 %in% rowiissues, "yes", "no")
mtcars$mentioned6[i] <- ifelse(6 %in% rowiissues, "yes", "no")
}
data(mtcars)
for(i in 1:nrow(mtcars)){
rowi <- mtcars[i,]
rowiissues <- c(rowi$vs, rowi$carb, rowi$am)
mtcars$mentioned4[i] <- ifelse(4 %in% rowiissues, "yes", "no")
mtcars$mentioned6[i] <- ifelse(6 %in% rowiissues, "yes", "no")
}
mtcars
# issue1, issue2, issue3....., issue27
rowiissues <- c(rowi$vs, rowi$carb, rowi$am)
rowiissues
`V-Dem-CY-Full+Others-v13` <- readRDS("/Users/ktmccabe/Downloads/V-Dem-CY-FullOthers_R_v13/V-Dem-CY-Full+Others-v13.rds")
View(`V-Dem-CY-Full+Others-v13`)
save(V-Dem-CY-Full+Others-v13, file="vDemfull13.RData")
vdem <- `V-Dem-CY-Full+Others-v13`
save(vdem, file="~/Downloads/vDemfull13.RData")
load("/Users/ktmccabe/Downloads/vDemfull13.RData")
load("/Users/ktmccabe/Downloads/vDemfull13.RData")
View(vdem)
table(vdem$year)
