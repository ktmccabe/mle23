ai$useany_alexa <- ifelse(ai$ai_type_3 =="Amazon's Alexa", 1, 0)
table(ai$ai_type_4)
table(ai$ai_type_5)
table(ai$ai_type_6)
ai$useany_grammarly <- ifelse(ai$ai_type_5 =="Grammarly", 1, 0)
table(ai$ai_type_7)
ai$useany_siri<- ifelse(ai$ai_type_6 =="Siri", 1, 0)
table(ai$ai_type_8)
ai_tools <- ai %>%
select(use_chatgpt, use_spellcheck, use_grammar,
use_translate, use_officehours, use_studygroups,
use_learningcenter,
use_tutoring, use_writingcenter, use_onlinecomputers)%>%
summarise_all(., mean, na.rm=T) %>%
gather(var, value)
ai_tools
ai$usage_entertainment <- ifelse(ai$usage_type_1 == "Never", 0, 1)
ai$usage_worktasks <- ifelse(ai$usage_type_2 == "Never", 0, 1)
ai$usage_language <- ifelse(ai$usage_type_3 == "Never", 0, 1)
ai$usage_recipes <- ifelse(ai$usage_type_4 == "Never", 0, 1)
ai$usage_newideas <- ifelse(ai$usage_type_5 == "Never", 0, 1)
ai$usage_coursework <- ifelse(ai$usage_type_6 == "Never", 0, 1)
ai$usage_writingpapers <- ifelse(ai$usage_type_7 == "Never", 0, 1)
ai$usage_assignments <- ifelse(ai$usage_type_8 == "Never", 0, 1)
ai$usage_data <- ifelse(ai$usage_type_9 == "Never", 0, 1)
ai$usage_music <- ifelse(ai$usage_type_10 == "Never", 0, 1)
ai$usage_travel <- ifelse(ai$usage_type_11 == "Never", 0, 1)
ai$usage_creativewriting <- ifelse(ai$usage_type_12 == "Never", 0, 1)
ai_usage <- ai %>%
select(usage_entertainment, usage_worktasks,
usage_language,
usage_recipes,
usage_newideas,
usage_coursework,
usage_writingpapers,
usage_assignments,
usage_data,
usage_music,
usage_travel, usage_creativewriting)%>%
summarise_all(., mean, na.rm=T) %>%
gather(var, value)
ai_usage$types <- c("Entertainment", "Work Tasks",
"Learning a Language", "Recipes/Cooking",
"New ideas", "Sources for coursework",
"Writing papers", "Help with assignments",
"Analyzing data", "Creating music",
"Travel ideas", "Creative writing")
ai_usage
prop.table(table(ai$skills_competent))
prop.table(table(ai$skills_helpsexams))
prop.table(table(ai$skills_data))
prop.table(table(ai$skills_improvewriting))
tapply(ai$highgpa, ai$firstgen_binary, mean, na.rm=T)
tapply(ai$highgpa == "High GPA", ai$firstgen_binary, mean, na.rm=T)
tapply(ai$racegroupsmall == "Asian/PI", ai$firstgen_binary, mean, na.rm=T)
tapply(ai$racegroupsmall == "White", ai$firstgen_binary, mean, na.rm=T)
tapply(ai$racegroupsmall == "Black/Latino", ai$firstgen_binary, mean, na.rm=T)
table(ai$usage_assignments, ai$firstgen)
tapply(ai$female == "female", ai$firstgen_binary, mean, na.rm=T)
tapply(ai$female == "Female", ai$firstgen_binary, mean, na.rm=T)
tapply(ai$firstgen_binary , ai$femalle, mean, na.rm=T)
tapply(ai$firstgen_binary , ai$female, mean, na.rm=T)
setwd("~/Dropbox/GitHub2/mle23")
setwd("~/Dropbox/GitHub2/dsps23")
## 2023 update
justices <- read.csv("data/justices2023.csv")
justices <- subset(justices, term >= 1991 & term != 2005)
justices$justiceName <- as.character(justices$justiceName)
medians <- tapply(justices$post_mn, justices$term, median)
medians <- tapply(justices$post_mn, justices$term, median)
names(justices)
medians
justices <- read.csv("data/justices2023.csv")
justices <- subset(justices, term >= 1991 & term != 2005)
write.csv(justices, "data/justices23.csv")
?barplot
basque <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/basque.csv", stringsAsFactors = T)
gdpminyear <- rep(NA, 17) # empty "container" vector
regions <- unique(basque$region) # what we iterate through
names(gdpminyear) <- unique(basque$region) # labels for our output
for(i in 1:17){
regionsubset <- subset(basque region == regions[i])
i <- 1
i <- 13
regionsubset <- subset(basque region == regions[13])
regions[13]
regions[13]
regionsubset <- subset(basque region == "Madrid")
regionsubset <- subset(basque, region == "Madrid")
regions[13]
regionsubset <- subset(basque, region == regions[13])
gdpminyear[13] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
gdpminyear[13]
for(i in 1:17){
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
}
head(gdpminyear)
i <- 14
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
gdpminyear[i]
regionsubset <- subset(basque, region == regions[14])
gdpminyear[14] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
gdpminyear[14]
regionsubset <- subset(basque, region == regions[15])
gdpminyear[15] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
gdpminyear[15]
for(i in 1:17)
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
}
i <- 2
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
gdpminyear[i]
for(i in 1:17)
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
}
gdpminyear <- rep(NA, 17)
gdpminyear
regions <- unique(basque$region) # what we iterate through
regions
names(gdpminyear) <- unique(basque$region) # labels for our output
gdpminyear
for(i in 1:17){
regionsubset <- subset(basque, region == regions[i])
gdpminyear[i] <- regionsubset$gdpcap[regionsubset$year ==
min(regionsubset$year)]
)
for(i in 1:17)){
(70 + 10) / 100
(40 + 10) / 100
(45 + 10) / 100
adjustedpollresults <- rep(NA, length(pollresults))
pollresults <- c(70, 40, 45, 60, 43, 80, 23)
pollresults <- c(70, 40, 45, 60, 43, 80, 23)
adjustedpollresults <- rep(NA, length(pollresults))
adjustedpollresults
pollresults[1]
pollresults[2]
for(i in 1:length(pollresults)){
adjustedpollresults <- (pollresults[i] + 10) / 100
}
adjustedpollresults
pollresults <- c(70, 40, 45, 60, 43, 80, 23)
adjustedpollresults <- rep(NA, length(pollresults))
for(i in 1:length(pollresults)){
adjustedpollresults[i] <- (pollresults[i] + 10) / 100
}
adjustedpollresults
for(i in 1:length(pollresults)){
adjustedpollresults[i] <- (pollresults[i] + 10)) / 100
adjustedpollresults[i] <- (pollresults[i] + 10)) / 100
adjustedpollresults[3] <- (pollresults[3] + 10)) / 100
for(i 1:length(pollresults)){
adjustedpollresults[3] <- (pollresults[3] + 10)) / 100
for(i in 1:length(pollresults)){
adjustedpollresults[i] <- (pollresults[i] + 10) / 100
}
adjustedpollresults
for(i in X)){
##1a
prochoice <- c( "2004 May 2-4, 2005 May 2-5, 2006 May 8-11, 2007 May 10-13, 2008 May 8-11, 2009 May 7-9, 2010 May 3-6, 2011 May 5-8, 2012 May 3-6, 2013 May 2-7, 2014 May 8-11, 2015 May 6-10, 2016 May 4-8, 2017 May 3-7, 2018 May 1-10, 2019 May 1-12, 2020 May 1-13, 2021 May 3-18, 2022 May 2-22, 2023 May 1-24")
prochoice <- sum(52,55, 49, 48, 46, 48, 49, 47, 50, 47, 45, 48, 41, 47, 46, 49, 45, 46, 42, 50, 49, 51, 48, 49)
## Because include=FALSE, won't appear in your compiled document. Leave this code chunk as it is.
## This chunk sets global options for the full document, such as how big the figures should be. Leave this code chunk as it is.
knitr::opts_chunk$set(echo = TRUE,  fig.width = 5, fig.height = 4, fig.align = "center", tidy = TRUE)
prochoice <- c( "2004 May 2-4, 2005 May 2-5, 2006 May 8-11, 2007 May 10-13, 2008 May 8-11, 2009 May 7-9, 2010 May 3-6, 2011 May 5-8, 2012 May 3-6, 2013 May 2-7, 2014 May 8-11, 2015 May 6-10, 2016 May 4-8, 2017 May 3-7, 2018 May 1-10, 2019 May 1-12, 2020 May 1-13, 2021 May 3-18, 2022 May 2-22, 2023 May 1-24")
prochoice <- sum(52,55, 49, 48, 46, 48, 49, 47, 50, 47, 45, 48, 41, 47, 46, 49, 45, 46, 42, 50, 49, 51, 48, 49)
##Observation: 1147
numberofvalues <- length(prochoice)
##length is 19
mean <- sum(prochoice)/length(nameofvalues)
nameofvalues <- c(2004, 2005, 2006,2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022)
##length is 19
mean <- sum(prochoice)/length(nameofvalues)
mean
length(prochoice)
prochoice <- c(52,55, 49, 48, 46, 48, 49, 47, 50, 47, 45, 48, 41, 47, 46, 49, 45, 46, 42, 50, 49, 51, 48, 49)
prochoice
prochoice
sum(prochoice)
length(prochoice)
sum(prochoice)/length(prochoice)
mean(prochoice)
min(prochoice)
max(prochoice)
prochoicebefore2022 <- c(49, 48, 46, 48, 49, 47, 50, 47, 45, 48, 41, 49, 45, 46, 42, 50, 49, 51, 48, 49)
prochoiceafter2022 <- c(52, 55)
mean(prochoiceafter2022)
mean(prochoicebefore2022)
mean(prochoiceafter2022)
mean(prochoiceafter2022)- mean(prochoicebefore2022)
prochoicebefore2022 <- prochoice[1:22]
prochoicebefore2022
## Code for Problem 1b
prochoicebefore2022 <- prochoice[3:24]
prochoicebefore2022
prochoicebefore2022 <- prochoice[3:24]
prochoiceafter2022 <- prochoice[1:2]
setwd("/Users/ktmccabe/Dropbox/GitHub2/dsps23")
## Code for Problem 2a
criminal <- read.csv("data/criminalrecord.csv")
setwd("/Users/ktmccabe/Dropbox/Rutgers Teaching/data science for politics/fall2023/assignments")
## Code for Problem 2a
criminal <- read.csv("criminalrecord.csv")
criminalrecord <- subset(criminal, crimrec == 1)
nocriminalrecord <- subset(criminal, crimrec == 0)
View(nocriminalrecord)
(criminalrecord$callback)
mean(criminalrecord$callback)
mean(nocriminalrecord$callback)
mean(criminalrecord$callback)
mean(nocriminalrecord$callback)
nocriminalrecordwhite <- subset(criminal, crimrec == 0 & black == 0)
criminalrecordblack <- subset(criminal, crimrec == 1 & black == 1)
criminalrecordwhite <- subset(criminal, crimrec == 1 & black == 0)
nocriminalrecordblack <- subset(criminal, crimrec == 0 & black == 1)
mean(criminalrecordblack$callback)
mean(criminalrecordwhite$callback)
mean(nocriminalrecordblack$callback)
mean(nocriminalrecordwhite$callback)
basque <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/basque.csv", stringsAsFactors = T)
View(basque)
basqueBefore <- subset(basque, (year < 1973) &
(region == "Basque Country"))
## Basque after terrorism
basqueAfter <- subset(basque, (year >= 1973) &
(region == "Basque Country"))
## others before terrorism
othersBefore <- subset(basque, (year < 1973) &
(region != "Basque Country"))
## others after terrorism
othersAfter <- subset(basque, (year >= 1973) &
(region != "Basque Country"))
View(basqueAfter)
View(othersAfter)
###################################################
### Mean: cross-section comparison
###################################################
mean(basqueAfter$gdpcap) - mean(othersAfter$gdpcap)
###################################################
mean(basqueAfter$gdpcap) - mean(basqueBefore$gdpcap)
treatDiff <- mean(basqueAfter$gdpcap) -
mean(basqueBefore$gdpcap)
treatDiff
controlDiff <- mean(othersAfter$gdpcap) -
mean(othersBefore$gdpcap)
controlDiff
treatDiff - controlDiff
setwd("~/Box/student familiarity with ai/data")
library(tidyverse)
library(ggplot2)
library(scales)
library(gtsummary)
ai <- read_csv("aisurveychoicetext.csv")
ai <- subset(ai, Progress==100 & consent == "I Agree")
nrow(ai)
34+80+160
106/274
ai$agegroup <- ifelse(ai$age >= 22, "22 or older", ai$age)
ai$firstgen_binary <- ifelse(ai$firstgen == "None of my parents/legal guardians graduated from a 4-year college/university", 1, 0)
ai_demos <- ai %>% select(year, major_1, firstgen, gender,
raceethn_1, raceethn_2, raceethn_3,
raceethn_4, agegroup, ideology,
gparange) %>% tbl_summary()
ai_demos
table(ai$gender)
ai$female <- ifelse(ai$gender == "Female", "Female",
ifelse(ai$gender=="Male", "Male", NA))
table(ai$gparange)
ai$highgpa <- ifelse(ai$gparange == "3.75 or above", "High GPA",
ifelse(ai$gparange %in% c("2.5-2.99",
"3.0-3.49",
"3.5-3.74", "Below 2.5"), "Lower GPA", NA))
ai$racegroup <- ifelse(ai$raceethn_3 == "Hispanic/Latino", "Hispanic",
ifelse(ai$raceethn_3 != "Hispanic/Latino" &
ai$raceethn_2 == "Black/African American", "Black",
ifelse(ai$raceethn_4 == "Asian/Pacific Islander" &
ai$raceethn_3 != "Hispanic/Latino" &
ai$raceethn_2 != "Black/African American", "Asian/PI",
ifelse(ai$raceethn_1 == "White/Caucasian" &
ai$raceethn_4 != "Asian/Pacific Islander" &
ai$raceethn_3 != "Hispanic/Latino" &
ai$raceethn_2 != "Black/African American", "White", "Other"))))
ai$racegroupsmall <- ifelse(ai$racegroup == "Black" |
ai$racegroup == "Hispanic", "Black/Latino",
ifelse(ai$racegroup == "Other", NA, ai$racegroup))
table(ai$racegroupsmall)
ai$socsci <- ifelse(ai$major_1 == "Social Science (political science, philosophy, psychology, sociology, etc.)", "soc sci major", "non-soc sci major")
## code up efficacy
recodeeff <- function(var){
newvar <- ifelse(var == "Agree strongly", 5,
ifelse(var == "Agree somewhat", 4,
ifelse(var == "Neither agree nor disagree", 3,
ifelse(var == "Disagree somewhat", 2,
ifelse(var == "Disagree strongly", 1, NA)))))
return(newvar)
}
ai$selfeffic_1 <- recodeeff(ai$selfeffic_1)
ai$selfeffic_2 <- recodeeff(ai$selfeffic_2)
ai$selfeffic_3 <- recodeeff(ai$selfeffic_3)
ai$selfeffic_4 <- recodeeff(ai$selfeffic_4)
ai$selfeffic_5 <- recodeeff(ai$selfeffic_5)
ai$selfeffic_6 <- recodeeff(ai$selfeffic_6)
ai$selfeffic_7 <- recodeeff(ai$selfeffic_7)
ai$selfeffic_8 <- recodeeff(ai$selfeffic_8)
ai$selfefficacy <- (ai$selfeffic_1 + ai$selfeffic_2 + ai$selfeffic_3 + ai$selfeffic_4 +ai$selfeffic_5 + ai$selfeffic_6 + ai$selfeffic_7 + ai$selfeffic_8)/8
ai$selfefficacy <- scales::rescale(ai$selfefficacy)
ggplot(data=ai, aes(x=selfefficacy))+
geom_histogram(bins=5)
ai$usage_entertainment <- ifelse(ai$usage_type_1 == "Never", 0, 1)
ai$usage_worktasks <- ifelse(ai$usage_type_2 == "Never", 0, 1)
ai$usage_language <- ifelse(ai$usage_type_3 == "Never", 0, 1)
ai$usage_recipes <- ifelse(ai$usage_type_4 == "Never", 0, 1)
ai$usage_newideas <- ifelse(ai$usage_type_5 == "Never", 0, 1)
ai$usage_coursework <- ifelse(ai$usage_type_6 == "Never", 0, 1)
ai$usage_writingpapers <- ifelse(ai$usage_type_7 == "Never", 0, 1)
ai$usage_assignments <- ifelse(ai$usage_type_8 == "Never", 0, 1)
ai$usage_data <- ifelse(ai$usage_type_9 == "Never", 0, 1)
ai$usage_music <- ifelse(ai$usage_type_10 == "Never", 0, 1)
ai$usage_travel <- ifelse(ai$usage_type_11 == "Never", 0, 1)
ai$usage_creativewriting <- ifelse(ai$usage_type_12 == "Never", 0, 1)
ai_usage <- ai %>%
select(usage_entertainment, usage_worktasks,
usage_language,
usage_recipes,
usage_newideas,
usage_coursework,
usage_writingpapers,
usage_assignments,
usage_data,
usage_music,
usage_travel, usage_creativewriting)%>%
summarise_all(., mean, na.rm=T) %>%
gather(var, value)
ai_usage$types <- c("Entertainment", "Work Tasks",
"Learning a Language", "Recipes/Cooking",
"New ideas", "Sources for coursework",
"Writing papers", "Help with assignments",
"Analyzing data", "Creating music",
"Travel ideas", "Creative writing")
recodeapp <- function(var){
newvar <- ifelse(var == "Extremely appropriate", 5,
ifelse(var == "Somewhat appropriate", 4,
ifelse(var == "Neither appropriate nor inappropriate", 3,
ifelse(var=="Somewhat inappropriate", 2,
ifelse(var == "Extremely inappropriate", 1, NA)))))
newvar <- scales::rescale(newvar)
return(newvar)
}
ai$app_writeessay <- recodeapp(ai$student_appropriate_1)
ai$app_researchpaper <- recodeapp(ai$student_appropriate_2)
ai$app_reliablesources <- recodeapp(ai$student_appropriate_3)
ai$app_studying <- recodeapp(ai$student_appropriate_4)
ai$app_researchquestions <- recodeapp(ai$student_appropriate_5)
ai$app_math <- recodeapp(ai$student_appropriate_6)
ai$app_dataviz <- recodeapp(ai$student_appropriate_7)
ai$app_writingfeedback <- recodeapp(ai$student_appropriate_8)
ai$use_chatgpt <- ifelse(ai$useoftools_1 == "ChatGPT", 1, 0)
ai$use_spellcheck <- ifelse(ai$useoftools_2 == "Spell Check", 1, 0)
ai$use_grammar <- ifelse(ai$useoftools_3 == "Grammarly or grammar check tools", 1, 0)
ai$use_translate <- ifelse(ai$useoftools_4 == "Google translate (or any translation tools)", 1, 0)
ai$use_officehours <- ifelse(ai$useoftools_5 == "Attending instructor's office hours", 1, 0)
ai$use_studygroups <- ifelse(ai$useoftools_6 == "Study groups", 1, 0)
ai$use_learningcenter <- ifelse(ai$useoftools_7 == "Learning Centers", 1, 0)
ai$use_tutoring <- ifelse(ai$useoftools_8 == "Tutoring", 1, 0)
ai$use_writingcenter <- ifelse(ai$useoftools_9 == "Writing Center", 1, 0)
ai$use_onlinecomputers <- ifelse(ai$useoftools_10 == "Online computers or computation tools", 1, 0)
ai_tools <- ai %>%
select(use_chatgpt, use_spellcheck, use_grammar,
use_translate, use_officehours, use_studygroups,
use_learningcenter,
use_tutoring, use_writingcenter, use_onlinecomputers)%>%
summarise_all(., mean, na.rm=T) %>%
gather(var, value)
ai_tools$types <- c("ChatGPT", "Spell Check",
"Grammar Check", "Translation", "Office Hours",
"Study Groups", "Learning Centers",
"Tutoring", "Writing Center",
"Online Computers")
ethics <- ai %>% select(ethics_1, ethics_2,
ethics_3, ethics_4, ethics_5, ethics_6,
ethics_7, ethics_8) %>%
gather(var, value)
ethics$Purpose <- NA
ethics$Purpose[ethics$var == "ethics_1"] <- "Military drones"
ethics$Purpose[ethics$var == "ethics_2"] <- "Risky jobs"
ethics$Purpose[ethics$var == "ethics_3"] <- "Teaching assistant"
ethics$Purpose[ethics$var == "ethics_4"] <- "Self-driven \n delivery trucks"
ethics$Purpose[ethics$var == "ethics_5"] <- "Facial recognition \n in public spaces"
ethics$Purpose[ethics$var == "ethics_6"] <- "Facial recognition \n for class attendance"
ethics$Purpose[ethics$var == "ethics_7"] <- "Write letters \n of recommendation"
ethics$Purpose[ethics$var == "ethics_8"] <- "Write papers and \n complete assignments"
ggplot(ethics, aes(x=value, group=Purpose,y = after_stat(prop)))+
facet_wrap(~Purpose)+
geom_bar(stat="count", fill="black")+
theme_minimal()+
coord_flip()+
labs(y="Proportion", x="", title="Perception of Different AI Tasks")
## code up efficacy
recodeskills <- function(var){
newvar <- ifelse(var == "Strongly agree", 5,
ifelse(var == "Somewhat agree", 4,
ifelse(var == "Neither agree nor disagree", 3,
ifelse(var == "Somewhat disagree", 2,
ifelse(var == "Strongly disagree", 1, NA)))))
newvar <- scales::rescale(newvar)
return(newvar)
}
ai$skills_competent <- recodeskills(ai$ai_skills_1)
ai$skills_integritypol <- recodeskills(ai$ai_skills_2)
ai$skills_improvewriting <- recodeskills(ai$ai_skills_3)
ai$skills_data <- recodeskills(ai$ai_skills_4)
ai$skills_notviolate <- recodeskills(ai$ai_skills_5)
ai$skills_helpsexams <- recodeskills(ai$ai_skills_6)
ai_skills <- ai %>%
select(skills_competent, skills_integritypol,
skills_improvewriting, skills_data,
skills_notviolate, skills_helpsexams)%>%
summarise_all(., mean, na.rm=T) %>%
gather(var, value)
ai_skills$types <- c("Competent with AI", "Know how to adhere to integrity policy",
"Know how to use AI to improve writing", "Know how to use AI to analyze data",
"Know how to not plagiarize with AI", "Know how to use AI to prepare for exams")
prop.table(table(ai$usage_assignments, ai$firstgen_binary))
fit.l <- glm(usage_assignments ~ firstgen_binary, data=ai, family=binomial(link="logit"))
summary(fit.1)
summary(fit.l)
fit.l <- glm(usage_coursework ~ firstgen_binary, data=ai, family=binomial(link="logit"))
summary(fit.l)
fit.m <- glm(usage_entertainment ~ female, data=ai, family=binomial(link="logit"))
summary(fit.m)
fit.l <- glm(usage_writingpapers ~ firstgen_binary, data=ai, family=binomial(link="logit"))
summary(fit.l)
fit.m <- lm(skills_competent ~ female, data=ai, family=binomial(link="logit"))
summary(fit.m)
tapply(ai$use_writingcenter, ai$firstgen_binary, mean, na.rm=T)
dhs <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/dhs_ipv.csv", stringsAsFactors = T)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = 0.65)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = 0.65,
cex.names = 1.2)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = 0.65,
cex.lab = 1.2)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = 0.65,
cex.names = 2.5)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = 1.2)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .65,
#names = c("Asia", "")
cex.names = 2.5)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .65,
names = c("Asia", "Latin America", "Middle East", "Sub-Saharan Africa"),
cex.names = 2.5)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55,
names = c("Asia", "Latin America", "Middle East", "Sub-Saharan Africa"))
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55,
names = c("Asia", "Latin America", "Middle East", "SS Africa"))
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat \n when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
knitr::opts_chunk$set(echo = TRUE, out.width="90%")
dhs <- read.csv("https://raw.githubusercontent.com/ktmccabe/teachingdata/main/dhs_ipv.csv", stringsAsFactors = T)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
## Time for boxplots!
boxplot(beat_goesout ~ region, data = dhs, ylab= "% Agree Beat when Goes Out",
main = "Domestic Violence Across Regions", cex.axis = .55)
setwd("~/Dropbox/Rutgers Teaching/MLE/fall23/lectures")
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
paste0("\n \\", "footnotesize","\n\n", x, "\n\n \\small")
})
library(foreign)
library(MASS)
pg <- read.dta("paluckgreen.dta")
pg$treat <- ifelse(pg$treat == "yes", 1, 0)
fit <- polr(as.factor(dissent) ~ treat, data= pg, Hess = T, method = "probit")
summary(fit)
